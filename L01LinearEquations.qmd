---
jupyter: python3
---
```{python}
#| echo: false
qr_setting = None
#
import numpy as np
import matplotlib as mp
import pandas as pd
import matplotlib.pyplot as plt
import laUtilities as ut
import slideUtilities as sl
import demoUtilities as dm
import pandas as pd
from matplotlib import animation
from IPython.display import HTML
```

## Linear Equations

::: {.content-visible when-profile="slides"}
![](images/nine-chapters-mathematical-art.jpg){width=350 fig-alt="A page from Nine Chapters on the Mathematical Art"}
:::


:::: {.content-hidden when-profile="slides"}
::: {.column-margin}
Many parts of this page are based on _Linear Algebra and its
Applications,_ by David C. Lay
:::
::::

::: {.content-visible when-profile="slides"}
##
:::

> Traditionally, algebra was the art of solving equations and systems of equations.  The word _algebra_ comes form the Arabic _al-jabr_ which means _restoration_ (of broken parts).   
>
> The term was first used in a mathematical sense by Mohammed al-Khowarizmi (c. 780-850) who worked at the House of Wisdom, an academy established by Caliph al Ma'mum in Baghdad.   
>
> Linear algebra, then, is the art of solving systems of linear equations.
>
>_Linear Algebra with Applications_, Bretscher

:::::: {.fragment}
::::: {.columns}
:::: {.column width="75%"}
Al-Khowarizmi gave his name to the _algorithm_.  

He wrote a book called _ilm al-jabr wa'l-muqābala'_ which means "The science of restoring what is missing and equating like with like."

::: {.fragment}
Our entry point into linear algebra will be __solving systems of linear equations.__
:::
::::

:::: {.column width="25%"}
![](images/khwarizmi1.jpg){width=250 fig-alt="USSR stamp with image of Al-Khowarizmi"}
::::
:::::
:::: {.content-hidden when-profile="slides"}
::: {.column-margin}
[Source](https://muslimheritage.com/al-khawarizmi/)
:::
::::
::::::

::: {.content-visible when-profile="slides"}
---
:::

Here is a famous example of such a problem.

::::: {.columns}
:::: {.column width="75%"}
> The yield of one bundle of inferior rice, two bundles of medium grade rice, and three bundles of superior rice is 39 _dou_ of grain.  The yield of one bundle of inferior rice, three bundles of medium grade rice, and two bundles of superior rice is 34 _dou_.  The yield of three bundles of inferior rice, two bundles of medium grain rice, and one bundle of superior rice is 26 _dou_.  What is the yield of one bundle of each grade of rice?
>
>_Nine Chapters on the Mathematical Art_, c. 200 BCE, China
::::

:::: {.column width="25%"}
![](images/nine-chapters-mathematical-art.jpg){width=250 fig-alt="A page from Nine Chapters on the Mathematical Art"}
::::
:::::

:::: {.content-hidden when-profile="slides"}
::: {.column-margin}
<a href="http://commons.wikimedia.org/wiki/File:%E4%B9%9D%E7%AB%A0%E7%AE%97%E8%A1%93%E7%B4%B0%E8%8D%89%E5%9C%96%E8%AA%AA.jpg#/media/File:%E4%B9%9D%E7%AB%A0%E7%AE%97%E8%A1%93%E7%B4%B0%E8%8D%89%E5%9C%96%E8%AA%AA.jpg">九章算術細草圖說</a> by 中國書店海王邨公司 - <a rel="nofollow" class="external free" href="http://pmgs.kongfz.com/detail/1_158470/">http://pmgs.kongfz.com/detail/1_158470/</a>. Licensed under Public Domain via <a href="//commons.wikimedia.org/wiki/">Wikimedia Commons</a>.
:::
::::

::: {.fragment}
Let's denote the unknown quantities as $x_1$, $x_2$, and $x_3$.  These are the yields of one bundle of inferior, medium grade, and superior rice, respectively.  We can then write the problem as:

$$
\begin{array}{rcr}
x_1 + 2 x_2 + 3 x_3 &=& 39\\
x_1 + 3 x_2 + 2 x_3 &=& 34\\
3 x_1 + 2 x_2 + x_3 &=& 26
\end{array}
$$

The problem then is to determine the values of $x_1, x_2,$ and $x_3$.
:::

::: {.fragment}
These are _linear_ equations.   A linear equation is one in which no term has power other than 1.  

For example, there are no terms involving $x_1^2$, or $x_1x_2$, or $\sqrt{x_3}$.
:::

## Basic Definitions

::: {.incremental}
* A _linear equation_ in the variables $x_1, \dots, x_n$ is an equation that can be written in the form 
$$a_1 x_1 + a_2 x_2 + \dots + a_n x_n = b$$ 
where $b$ and the coefficients $a_1, \dots, a_n$ are real or complex numbers that are usually known in advance.

* A _system of linear equations_ (or _linear system_ ) is a collection of one or more linear equations involving the same variables - say $x_1, \dots, x_n$.
:::

::: {.content-visible when-profile="slides"}
##
:::

::: {.incremental}
* A _solution_ of the system is a list of numbers $(s_1, s_2, \dots, s_n)$ that makes each equation a true statement when the values $s_1, s_2, \dots, s_n$ are substituted for $x_1, x_2, \dots, x_n,$ respectively.
* The set of all possible solutions is called the _solution set_ of the linear system. 
* Two linear systems are called _equivalent_ if they have the same solution set. 
:::

## How Many Solutions?

:::: {.fragment}
A system of linear equations has:

::: {.incremental}
1. __no__ solution, or
2. __exactly one__ solution, or
3. __infinitely many__ solutions.
:::
::::

:::: {.fragment}
::: {.incremental}
* A system of linear equations is said to be __consistent__ if it has either one solution or infinitely many solutions.
* A system of linear equations is said to be __inconsistent__ if it has no solution.
:::
::::

## The Geometry of Linear Equations

::: {.fragment}
Any list of numbers $(s_1, s_2, \dots, s_n)$ can be thought of as a point in $n$-dimensional space.

We call that space $\mathbb{R}^n$.

So if we are considering linear equations with $n$ unknowns, the solutions are points in $\mathbb{R}^n$.
:::

::: {.fragment}
Now, any linear equation defines a point set with dimension one less than the space.  For example:

* if we are in 2-space (2 unknowns), a linear equation defines a line.
* if we are in 3-space (3 unknowns), a linear equation defines a plane.
* in higher dimensions, we refer to all such sets as _hyperplanes._

Question: why does a linear equation define a point-set of dimension one less than the space?
:::

## Some Examples in $\mathbb{R}^2$ 

::: {.fragment}
How many solutions does the linear system have in each case?
:::

::: {.fragment}
```{python}
#| echo: false
fig = ut.two_d_figure('Figure 1.2d.1', size = (5,5))
fig.centerAxes()
fig.plotLinEqn( 1, -2, -1, color = 'r')
fig.plotLinEqn(-1,  3,  3, color = 'b')
plt.legend(loc='best', fontsize = 14);
```
:::

::: {.fragment}
The above system of two equations has __exactly one__ solution.
:::

::: {.content-visible when-profile="slides"}
##
:::

```{python}
#| echo: false
fig = ut.two_d_figure('Figure 1.2d.2', size = (5,5))
fig.centerAxes()
fig.plotLinEqn( 1, -2, -1, color = 'r')
fig.plotLinEqn(-1,  2,  3, color = 'b')
plt.legend(loc='best', fontsize = 14);
```

::: {.fragment}
The above system of two equations has __no__ solutions.
:::

::: {.content-visible when-profile="slides"}
##
:::

```{python}
#| echo: false
fig = ut.two_d_figure('Figure 1.2d.3', size = (5,5))
fig.centerAxes()
fig.plotLinEqn( 1, -2, -1, color = 'r')
fig.plotLinEqn(-1,  2,  1, format = '--', color = 'b')
plt.legend(loc='best', fontsize = 14)
```

::: {.fragment}
The above system of equations has __infinitely many__ solutions.
:::

## Some Examples in $\mathbb{R}^3$

::: {.fragment}
How many solutions are there in each of these cases?
:::

::: {.content-visible when-profile="slides"}
##
:::

```{python}
#| echo: false
fig = ut.three_d_figure((1, 1), fig_desc = 'Example 1: One Solution',
                        xmin = -5, xmax = 5, ymin = -5, ymax = 5, zmin = -5, zmax = 5, 
                        figsize = (5,5), qr = qr_setting, displayAxes = False)
plt.close()
eq1 = [1, 0, 0,  1]
eq2 = [0, 1, 0, -2]
eq3 = [0, 0, 1,  0]
fig.plotLinEqn(eq1, 'Brown')
fig.plotLinEqn(eq2, 'Green')
fig.plotLinEqn(eq3, 'Blue')
fig.plotIntersection(eq1, eq2, color='Blue', line_type='--')
fig.plotIntersection(eq2, eq3, color='Blue', line_type='--')
fig.plotIntersection(eq1, eq3, color='Blue', line_type='--')
# fig.set_title('Example 1')
fig.ax.view_init(azim = 0, elev = 22)
fig.save()
#
def anim(frame):
    fig.ax.view_init(azim = frame, elev = 22)
    # fig.canvas.draw()
#
# create and display the animation 
HTML(animation.FuncAnimation(fig.fig, anim,
                       frames = 4 * np.arange(90),
                       fargs = None,
                       interval = 30,
                       repeat = False).to_jshtml(default_mode = 'loop'))
```

::: {.content-visible when-profile="slides"}
##
:::

```{python}
#| echo: false
fig = ut.three_d_figure((1, 2), fig_desc = 'Example 2: No Solutions',
                        xmin = -5, xmax = 5, ymin = -5, ymax = 5, zmin = -5, zmax = 5, 
                        figsize = (5,5), qr = qr_setting, displayAxes = False)
plt.close()
# equation of a line from its normal a is a'x = a'a
# three normals 120 degrees spread around the y axis
eq1 = [np.sqrt(3/4),  0, 1/2,  1]
eq2 = [-np.sqrt(3/4), 0, 1/2,  1]
eq3 = [0,                 0, -1,       2]
fig.plotLinEqn(eq1, 'Brown')
fig.plotLinEqn(eq2, 'Green')
fig.plotLinEqn(eq3, 'Blue')
fig.plotIntersection(eq1, eq2, color='Blue', line_type='--')
fig.plotIntersection(eq2, eq3, color='Blue', line_type='--')
fig.plotIntersection(eq1, eq3, color='Blue', line_type='--')
# fig.set_title('Example 2')
fig.ax.view_init(azim = 0, elev = 22)
fig.save()
#
def anim(frame):
    fig.ax.view_init(azim = frame, elev = 22)
    # fig.canvas.draw()
#
# create and display the animation 
HTML(animation.FuncAnimation(fig.fig, anim,
                       frames = 4 * np.arange(90),
                       fargs = None,
                       interval = 30,
                       repeat = False).to_jshtml(default_mode = 'loop'))
```

::: {.content-visible when-profile="slides"}
##
:::

```{python}
#| echo: false
fig = ut.three_d_figure((1, 3), fig_desc = 'Example 3: Infinite Number of Solutions',
                        xmin = -5, xmax = 5, ymin = -5, ymax = 5, zmin = -5, zmax = 5, 
                        figsize = (5,5), qr = qr_setting, displayAxes = False)
plt.close()
# equation of a line from its normal a is a'x = a'a
# three normals 120 degrees spread around the y axis
eq1 = [np.sqrt(3/4),  0, 1/2,  0]
eq2 = [-np.sqrt(3/4), 0, 1/2,  0]
eq3 = [0,             0,  -1,  0]
fig.plotLinEqn(eq1, 'Brown')
fig.plotLinEqn(eq2, 'Green')
fig.plotLinEqn(eq3, 'Blue')
fig.plotIntersection(eq1, eq2, color='Blue', line_type='--')
fig.plotIntersection(eq2, eq3, color='Blue', line_type='--')
fig.plotIntersection(eq1, eq3, color='Blue', line_type='--')
#fig.set_title('Example 3')
#
fig.ax.view_init(azim = 0, elev = 22)
fig.save()
#
def anim(frame):
    fig.ax.view_init(azim = frame, elev = 22)
    # fig.canvas.draw()
#
# create and display the animation 
HTML(animation.FuncAnimation(fig.fig, anim,
                       frames = 4 * np.arange(90),
                       fargs = None,
                       interval = 30,
                       repeat = False).to_jshtml(default_mode = 'loop'))
```

::: {.content-visible when-profile="slides"}
##
:::

```{python}
#| echo: false
fig = ut.three_d_figure((1, 4), fig_desc = 'Example 4: No Solutions',
                        xmin = -5, xmax = 5, ymin = -5, ymax = 5, zmin = -5, zmax = 5, 
                        figsize = (5,5), qr = qr_setting, displayAxes = False)
plt.close()
# equation of a line from its normal a is a'x = a'a
# three normals 120 degrees spread around the y axis
eq1 = [np.sqrt(3/4),  0, 1/2,  0]
eq2 = [np.sqrt(3/4),  0, 1/2,  2]
eq3 = [np.sqrt(3/4),  0, 1/2,  -2]
fig.plotLinEqn(eq1, 'Brown')
fig.plotLinEqn(eq2, 'Green')
fig.plotLinEqn(eq3, 'Blue')
# fig.plotIntersection(eq1, eq2, color='Blue', line_type='--')
# fig.plotIntersection(eq2, eq3, color='Blue', line_type='--')
# fig.plotIntersection(eq1, eq3, color='Blue', line_type='--')
#fig.set_title('Example 4')
# 
fig.ax.view_init(azim = 0, elev = 22)
fig.save()
#
def anim(frame):
    fig.ax.view_init(azim = frame, elev = 22)
    # fig.canvas.draw()
#
# create and display the animation 
HTML(animation.FuncAnimation(fig.fig, anim,
                       frames = 4 * np.arange(90),
                       fargs = None,
                       interval = 30,
                       repeat = False).to_jshtml(default_mode = 'loop'))
```

::: {.content-visible when-profile="slides"}
##
:::

```{python}
#| echo: false
fig = ut.three_d_figure((1, 5), fig_desc = 'Example 5: No Solutions',
                        xmin = -5, xmax = 5, ymin = -5, ymax = 5, zmin = -5, zmax = 5, 
                        figsize = (5,5), qr = qr_setting, displayAxes = False)
plt.close()
# equation of a line from its normal a is a'x = a'a
# three normals 120 degrees spread around the y axis
eq1 = [np.sqrt(4/3),  0, -2,  0]
eq2 = [np.sqrt(3/4),  0, 1/2,  2]
eq3 = [np.sqrt(3/4),  0, 1/2,  -2]
fig.plotLinEqn(eq1, 'Brown')
fig.plotLinEqn(eq2, 'Green')
fig.plotLinEqn(eq3, 'Blue')
fig.plotIntersection(eq1, eq2, color='Blue', line_type='--')
# fig.plotIntersection(eq2, eq3, color='Blue', line_type='--')
fig.plotIntersection(eq1, eq3, color='Blue', line_type='--')
# fig.set_title('Example 5')
#
fig.ax.view_init(azim = 0, elev = 22)
fig.save()
#
def anim(frame):
    fig.ax.view_init(azim = frame, elev = 22)
    # fig.canvas.draw()
#
# create and display the animation 
HTML(animation.FuncAnimation(fig.fig, anim,
                       frames = 4 * np.arange(90),
                       fargs = None,
                       interval = 30,
                       repeat = False).to_jshtml(default_mode = 'loop'))
```

## The Matrices of a System

::: {.fragment}
The essential information of a linear system can be recorded compactly in a rectangular array called a __matrix.__
For the following system of equations, 

$$\begin{array}{rcr}
    x_1 - 2x_2 +x_3 &=& 5\\
    2x_2 - 8x_3 &=& -4\\
    6x_1 +5x_2 +9x_3 &=& -4
\end{array}$$     
:::

::: {.fragment}
the matrix                             

$$\left[\begin{array}{rrr}
    1  & -2  & 1 \\
    0 & 2 &  - 8 \\
    6 & 5 &9 
\end{array}\right]$$

is called the _coefficient matrix_ of the system.
:::

::: {.content-visible when-profile="slides"}
##
:::

An __augmented matrix__ of a system consists of the coefficient matrix with an added column containing the constants from the right sides of the equations.

For the same system of equations,

$$
\begin{array}{rcr}
    x_1 - 2x_2 +x_3 &=& 5\\
    2x_2 - 8x_3 &=& -4\\
    6x_1 +5x_2 +9x_3 &=& -4
\end{array}
$$  

::: {.fragment}
the matrix                             

$$\left[\begin{array}{rrrr}
    1  & -2  & 1 & 5\\
    0 & 2 &  - 8 & -4\\
    6 & 5 &9 & -4
\end{array}\right]$$

is called the _augmented matrix_ of the system.   
:::

::: {.fragment}
A matrix with $m$ rows and $n$ columns is referred to as ''an $m \times n$ matrix'' and is an element of the set $\mathbb{R}^{m\times n}.$  

(Note that we always list the number of rows first, then the number of columns.)
:::

::: {.content-visible when-profile="slides"}
##
::::: {.fade-down .r-fit-text}
Question Time!   Q1.1
:::::
:::

## Solving Linear Systems

::: {.fragment}
To solve a linear system, we transform it into a _new_ system which is equivalent to the old system, meaning it has the same solution set.   

However, in the new system the solution is explicit.

We can make these transformations because of three facts.
:::

::: {.content-visible when-profile="slides"}
##
:::

__Fact Number 1:__ Given a set of linear equations, we can __add one equation to another__ without changing the solution set. 

::: {.fragment}
By definition, any solution of the old system makes each old equation true;  therefore any solution of the old system makes each new equation true.
:::

::: {.fragment}
It's also true that any assignment of values to variables that is __not__ a solution of the old system, is __not__ a solution of the new system.
:::

::: {.fragment}
For example, this system:

$$ 
\begin{array}{rcr}
3x_1 + 2x_2 &=& -3\\
-x_1 + 4x_2 &=& 2\\
\end{array}
$$ 
:::

::: {.fragment}
... has the same solution set as:

$$ 
\begin{array}{rcr}
3x_1 + 2x_2 &=& -3\\
2x_1 + 6x_2 &=& -1\\
\end{array}
$$
:::

::: {.content-visible when-profile="slides"}
##
:::

__Fact Number 2:__ Another, more obvious fact is that we can __multiply any equation by a constant__ (not zero) without changing its meaning (and therefore the solution set).

::: {.fragment}
Example: 

$$ 
3x = 2
$$

has the same solution set as:

$$
9x = 6
$$
:::

::: {.content-visible when-profile="slides"}
##
:::

__Fact Number 3:__ And an even more obvious fact is that we can __change the order__ of the equations without changing anything.

::: {.fragment}
Together, these three rules form a set of tools we can use to solve linear systems.   Here is an example.
:::

::: {.content-visible when-profile="slides"}
##
:::

### Step 1: Elimination

::: {.fragment}
The process we'll describe consists of two steps: _Elimination_ and _Backsubstitution._ 
:::

::: {.fragment}
The goal of _elimination_ is to create a _triangular_ matrix (or system).  

The basic operation we will repeatedly apply is to __add a multiple of one equation (row) to another.__  We'll do this with the equations and the matrix side-by-side. 
:::

::: {.fragment}
Here is the original system:

$$\begin{array}{cc}
\begin{array}{rcr}
    x_1 - 2x_2 +x_3 &=& 5\\
    2x_2 - 8x_3 &=& -4\\
    6x_1 +5x_2 +9x_3 &=& -4
\end{array}
& 
\;\;\;\;\;\;\left[\begin{array}{rrrr}
    1  & -2  & 1 & 5\\
    0 & 2 &  - 8 & -4\\
    6 & 5 &9 & -4
\end{array}\right]\\
\end{array}$$
:::

::: {.fragment}
To start the _elimination_ stage, we add -6 times the first equation to the third equation:

$$\begin{array}{rrrrrr}
    &6x_1& +5x_2& +9x_3& =& -4\\
 +  &-6x_1& +12x_2& -6x_3& =& -30\\
\hline 
   & &      17x_2& +3x_3 &=& -34\\
\end{array}$$
:::

::: {.fragment}
This gives us a new system.

$$\begin{array}{cr}
\begin{array}{rcr}
    x_1 - 2x_2 +x_3 &=& 5\\
    2x_2 - 8x_3 &=& -4\\
     17x_2 +3x_3 &=& -34
\end{array}
&
\;\;\;\;\;\;\left[\begin{array}{rrrr}
    1  & -2  & 1 & 5\\
    0 & 2 &  - 8 & -4\\
    0 & 17 & 3 & -34
\end{array}\right]\\
\end{array}
$$

Note that this is not the _same_ system of equations, but it is _equivalent_ -- it has the same solution set.
:::

::: {.fragment}
Next, we multiply the second equation by $1/2$ to get its leading coefficient to be 1:

$$\begin{array}{cr}
\begin{array}{rcr}
    x_1 - 2x_2 +x_3 &=& 5\\
    x_2 - 4x_3 &=& -2\\
     17x_2 +3x_3 &=& -34
\end{array}
&
\;\;\;\;\;\;\left[\begin{array}{rrrr}
    1  & -2  & 1 & 5\\
    0 & 1 &  - 4 & -2\\
    0 & 17 & 3 & -34
\end{array}\right]\\
\end{array}
$$
:::

::: {.fragment}
Next, we multiply the second equation by $-17$ and add it to the third equation:

$$\begin{array}{cr}
\begin{array}{rcr}
    x_1 - 2x_2 +x_3 &=& 5\\
    x_2 - 4x_3 &=& -2\\
         71x_3 &=& 0
\end{array}
&
\;\;\;\;\;\;\left[\begin{array}{rrrr}
    1  & -2  & 1 & 5\\
    0 & 1 &  - 4 & -2\\
    0 & 0 & 71 & 0
\end{array}
\right]\\
\end{array}
$$
:::

::: {.fragment}
And next we can divide the third equation by $71$ to get its leading coefficient equal to 1:

$$\begin{array}{cr}
\begin{array}{rcr}
    x_1 - 2x_2 +x_3 &=& 5\\
    x_2 - 4x_3 &=& -2\\
           x_3 &=& 0
\end{array}
&
\;\;\;\;\;\;\left[\begin{array}{rrrr}
    1  & -2  & 1 & 5\\
    0 & 1 &  - 4 & -2\\
    0 & 0 &  1 & 0\\
\end{array}\right]\\
\end{array}
$$

We have now put the system and matrix into _triangular_ form.  In a triangular matrix, all values below the diagonal are zero.
:::

::: {.content-visible when-profile="slides"}
##
:::

### Step 2: Backsubstitution

::: {.fragment}
At this point, the process shifts to _backsubstitution_.  We now have the value for one variable, and we will substitute it into other equations to simplify them and get values for the other variables.
:::

::: {.fragment}
Although we think of its as a somewhat different stage, in reality it still comes down to applying the three rules.   
:::

::: {.fragment}
First, we substitute the value of $x_3$ into the equations above it.  This is actually multiplying equation 3 by the proper value and adding it to equations above it.

$$\begin{array}{cr}
\begin{array}{rcr}
    x_1 - 2x_2 &=& 5\\
    x_2  &=& -2\\
           x_3 &=& 0
\end{array}
&
\;\;\;\;\;\;\left[\begin{array}{rrrr}
    1  & -2  & 0 & 5\\
    0 & 1 &  0 & -2\\
    0 & 0 &  1 & 0
\end{array}\right]\\
\end{array}
$$
:::

::: {.fragment}
Next, we do the same thing with equation 2, substituting it into equation 1 above it:

$$\begin{array}{cr}
\begin{array}{rcr}
    x_1  &=& 1\\
    x_2  &=& -2\\
           x_3 &=& 0
\end{array}
&
\;\;\;\;\;\;\left[\begin{array}{rrrr}
    1  & 0  & 0 & 1\\
    0 & 1 &  0 & -2\\
    0 & 0 &  1 & 0
\end{array}\right]\\
\end{array}
$$
:::

::: {.fragment}
Now we can __read off the solution:__ it is $x_1 = 1$, $x_2 = -2$, $x_3 = 0$.   Notice the particular form of the resulting matrix: ones on the diagonal, zeros above and below each 1.
:::

::: {.content-visible when-profile="slides"}
##
:::

Let's get a sense of this process geometrically. 

::: {.fragment}
Here are the three starting equations:
:::

::: {.fragment}
```{python}
#| echo: false
#| layout-ncol: 3
eq1 = [1, -2,  1,  5]
eq2 = [0,  2, -8, -4]
eq3 = [6,  5,  9, -4]

fig = ut.three_d_figure((1, 6), fig_desc = format(ut.formatEqn(eq1[0:3], eq1[3])),
                        xmin = -5, xmax = 5, ymin = -5, ymax = 5, zmin = -5, zmax = 5, qr = qr_setting)
fig.plotLinEqn(eq1, 'Brown')
fig.set_title('${}$'.format(ut.formatEqn(eq1[0:3], eq1[3])))
fig.save()

fig = ut.three_d_figure((1, 7), format(ut.formatEqn(eq2[0:3], eq2[3])),
                        xmin = -5, xmax = 5, ymin = -5, ymax = 5, zmin = -5, zmax = 5, qr = qr_setting)
fig.plotLinEqn(eq2, 'Green')
fig.set_title('${}$'.format(ut.formatEqn(eq2[0:3], eq2[3])))
fig.save()

fig = ut.three_d_figure((1, 8), fig_desc = format(ut.formatEqn(eq3[0:3], eq3[3])),
                        xmin = -5, xmax = 5, ymin = -5, ymax = 5, zmin = -5, zmax = 5, qr = qr_setting)
fig.plotLinEqn(eq3, 'Blue')
fig.set_title('${}$'.format(ut.formatEqn(eq3[0:3], eq3[3])))
```
:::

::: {.content-visible when-profile="slides"}
##
:::

Now let's compare the starting point and the finishing point:

$$
\begin{array}{rcr}
    x_1 - 2x_2 +x_3 &=& 5\\
    2x_2 - 8x_3 &=& -4\\
    6x_1 +5x_2 +9x_3 &=& -4
\end{array}
\hspace{0.5in}
{\LARGE\rightarrow}
\hspace{0.5in}
\begin{array}{rcr}
    x_1  &=& 1\\
    x_2  &=& -2\\
           x_3 &=& 0
\end{array}
$$

::::: {.columns}
:::: {.column width="50%"}
::: {.fragment}
```{python}
#| echo: false
fig = ut.three_d_figure((1, 9), fig_desc = 'All Three Equations',
                        xmin = -5, xmax = 5, ymin = -5, ymax = 5, zmin = -5, zmax = 5, 
                        figsize = (5,5), qr = qr_setting)
plt.close()
eq1 = [1, -2,  1,  5]
eq2 = [0,  2, -8, -4]
eq3 = [6,  5,  9, -4]
fig.plotLinEqn(eq1, 'Brown')
fig.plotLinEqn(eq2, 'Green')
fig.plotLinEqn(eq3, 'Blue')
fig.plotIntersection(eq1, eq2, color='Blue', line_type='--')
fig.plotIntersection(eq2, eq3, color='Blue', line_type='--')
fig.plotIntersection(eq1, eq3, color='Blue', line_type='--')
fig.plotPoint(1, -2, 0)
fig.set_title('All Three Equations')
#
fig.ax.view_init(azim = 0, elev = 22)
fig.save()
#
def anim(frame):
    fig.ax.view_init(azim = frame, elev = 22)
    # fig.canvas.draw()
#
# create and display the animation 
HTML(animation.FuncAnimation(fig.fig, anim,
                       frames = 4 * np.arange(90),
                       fargs = None,
                       interval = 30,
                       repeat = False).to_jshtml(default_mode = 'loop'))
```
:::
::::

:::: {.column width="50%"}
::: {.fragment}
```{python}
#| echo: false
fig = ut.three_d_figure((1, 10), fig_desc = 'The Equivalent System',
                        xmin = -5, xmax = 5, ymin = -5, ymax = 5, zmin = -5, zmax = 5, 
                        figsize = (5,5), qr = qr_setting)
plt.close()
eq1 = [1, 0, 0,  1]
eq2 = [0, 1, 0, -2]
eq3 = [0, 0, 1,  0]
fig.plotLinEqn(eq1, 'Brown')
fig.plotLinEqn(eq2, 'Green')
fig.plotLinEqn(eq3, 'Blue')
fig.plotIntersection(eq1, eq2, color='Blue', line_type='--')
fig.plotIntersection(eq2, eq3, color='Blue', line_type='--')
fig.plotIntersection(eq1, eq3, color='Blue', line_type='--')
fig.plotPoint(1, -2, 0)
fig.set_title('The Equivalent System')
# 
fig.ax.view_init(azim = 0, elev = 22)
fig.save()
#
def anim(frame):
    fig.ax.view_init(azim = frame, elev = 22)
    # fig.canvas.draw()
#
# create and display the animation 
HTML(animation.FuncAnimation(fig.fig, anim,
                       frames = 4 * np.arange(90),
                       fargs = None,
                       interval = 30,
                       repeat = False).to_jshtml(default_mode = 'loop'))
```
:::
::::
:::::

::: {.fragment}
$$
\left[\begin{array}{rrrr}
    1  & -2  & 1 & 5\\
    0 & 2 &  - 8 & -4\\
    6 & 5 &9 & -4
\end{array}
\right]
\hspace{0.5in}
{\LARGE\rightarrow}
\hspace{0.5in}
\left[\begin{array}{rrrr}
    1  & 0  & 0 & 1\\
    0 & 1 &  0 & -2\\
    0 & 0 &  1 & 0
\end{array}
\right]
$$

Notice how all the planes have shifted, but __they still intersect in the same point.__   This is the _geometric_ interpretation of __equivalent__ systems.
:::


## Verifying the Solution

::: {.fragment}
* It's important that, once you have solved a system, you _verify_ the solution
* i.e., go back and confirm that what you have computed, in fact meets the original requirements.

So, in our case here is the original system and its solution:

$$
\begin{array}{rcr}
    x_1 - 2x_2 +x_3 &=& 5\\
    2x_2 - 8x_3 &=& -4\\
    6x_1 +5x_2 +9x_3 &=& -4
\end{array}
\hspace{0.5in}
{\LARGE\rightarrow}
\hspace{0.5in}
\begin{array}{rcr}
    x_1  &=& 1\\
    x_2  &=& -2\\
           x_3 &=& 0
\end{array}
$$
:::

::: {.fragment}
We can verify by substitution:

$$
\begin{array}{rcr}
    1 - 2(-2) + 0 &=& 5\\
    2(-2) - 8(0) &=& -4\\
    6(1) +5(-2) +9(0) &=& -4
\end{array}
$$

The solution $(1, -2, 0)$ makes each equation true.  __Confirmed!__
:::

## Row Equivalence

::: {.fragment}
OK, let's step back and formalize what we have done.
:::

::: {.fragment}
__Elementary Row Operations__ are the following:

1. (Replacement) Replace one row by the sum of itself and a multiple of another row.
2. (Interchange) Interchange two rows.
3. (Scaling) Multiply all entries in a row by a nonzero constant.
:::

::: {.fragment}
Two matrices are called __row equivalent__ if there is a sequence of elementary row operations that transforms one matrix into the other.

If the augmented matrices of two linear systems are row equivalent, then the two systems __have the same solution set.__
:::

## Fundamental Questions

::: {.fragment}
When presented with a linear system, we always need to ask two fundamental questions:

1. Is the system __consistent;__ that is, does at least one solution exist?
2. If a solution exists, is there only one; that is, is the solution __unique?__

These really are fundamental; we will see that the answers to these questions have far-reaching implications.

:::

## Recognizing an Inconsistent System

::: {.fragment}
Consider the following system:

$$
\begin{array}{rcr}
x_2 - 4x_3 &=& 8\\
2x_1 - 3x_2 + 2x_3 &=& 1\\
4x_1 - 8x_2 + 12x_3 &=& 1
\end{array}
$$
:::

::: {.fragment}
whose augmented matrix is:

$$
\left[\begin{array}{rrrr}
0&1&-4&8\\
2&-3&2&1\\
4&-8&12&1
\end{array}\right]
$$

Let's apply our row reduction procedure to this matrix.
:::

::: {.fragment}
First, we'll interchange rows 1 and 2:

$$
\left[\begin{array}{rrrr}
2&-3&2&1\\
0&1&-4&8\\
4&-8&12&1
\end{array}\right]
$$
:::

::: {.fragment}
Next, we'll eliminate the $4x_1$ term in the third equation by adding $-2$ times row 1 to row 3:

$$
\left[\begin{array}{rrrr}
2&-3&2&1\\
0&1&-4&8\\
0&-2&8&-1
\end{array}\right]
$$
:::

::: {.fragment}
Next, we use the $x_2$ term in the second equation to eliminate the $-2x_2$ term from the third equation (that is, add 2 times row 2 to row 3).

$$
\left[\begin{array}{rrrr}
2&-3&2&1\\
0&1&-4&8\\
0&0&0&15
\end{array}\right]
$$
:::

::: {.fragment}
This matrix is now in triangular form.

What does it mean?  In particular, what does the last row say?
:::

::: {.fragment}
The last row stands for the equation:

$$ 0x_1 + 0x_2 + 0x_3 = 15.$$
:::

::: {.fragment}
Clearly, this equation has _no_ solution.  

Now, we know that row reductions never change the solution set of a system.  So, the original set of equations also has _no_ solution.   

The system of equations is __inconsistent.__
:::

::: {.fragment}
We can see that a system that leads by row reductions to an equation of the form $0 = k$ for some nonzero $k$ must be inconsistent.

In fact, we will show later that __any__ inconsistent system will lead by row reductions to an equation of the form $0 = k$ for some nonzero $k$.
:::

## Geometric Interpretation of Inconsistency

::: {.fragment}
Here are our original equations, as hyperplanes:
:::

::: {.fragment}
```{python}
#| echo: false
#| layout-ncol: 3
eq1 = [0,  1, -4,   8]
eq2 = [2, -3,  2,   1]
eq3 = [5, -8,  7, -20]

fig = ut.three_d_figure((1, 11), fig_desc = format(ut.formatEqn(eq1[0:3], eq1[3])),
                        xmin = -4, xmax = 4, ymin = -4, ymax = 4, zmin = -4, zmax = 4, qr = qr_setting)
fig.plotLinEqn(eq1, 'Brown')
fig.set_title('${}$'.format(ut.formatEqn(eq1[0:3], eq1[3])))
fig.save()

fig = ut.three_d_figure((1, 12), fig_desc = format(ut.formatEqn(eq2[0:3], eq2[3])),
                        xmin = -4, xmax = 4, ymin = -4, ymax = 4, zmin = -4, zmax = 4, qr = qr_setting)
fig.plotLinEqn(eq2, 'Green')
fig.set_title('${}$'.format(ut.formatEqn(eq2[0:3], eq2[3])))
fig.save()

fig = ut.three_d_figure((1, 13), fig_desc = format(ut.formatEqn(eq3[0:3], eq3[3])),
                        xmin = -4, xmax = 4, ymin = -4, ymax = 4, zmin = -4, zmax = 4, qr = qr_setting)
fig.plotLinEqn(eq3, 'Blue')
fig.set_title('${}$'.format(ut.formatEqn(eq3[0:3], eq3[3])))
```
:::

::: {.r-stack .fragment}
```{python}
#| echo: false
fig = ut.three_d_figure((1, 14), fig_desc = 'All Three Equations',
                        xmin = -5, xmax = 5, ymin = -5, ymax = 5, zmin = -5, zmax = 5, 
                        figsize = (5,5), qr = qr_setting)
plt.close()
fig.plotLinEqn(eq1, 'Brown')
fig.plotLinEqn(eq2, 'Green')
fig.plotLinEqn(eq3, 'Blue')
fig.plotIntersection(eq1, eq2, color='Blue')
fig.plotIntersection(eq1, eq3, color='Blue')
fig.set_title('All Three Equations')
# 
fig.ax.view_init(azim = 0, elev = 22)
fig.save()
#
def anim(frame):
    fig.ax.view_init(azim = frame, elev = 22)
    # fig.canvas.draw()
#
# create and display the animation 
HTML(animation.FuncAnimation(fig.fig, anim,
                       frames = 4 * np.arange(90),
                       fargs = None,
                       interval = 30,
                       repeat = False).to_jshtml(default_mode = 'loop'))
```
:::

::: {.fragment}
The figure illustrates that the two intersection lines are parallel.  So there is _no point that lies in all the hyperplanes_.  That is the geometric interpretation of inconsistency.
:::

:::::  {.content-visible when-profile="slides"}

## Summary

::: {.fragment}
Our entry into linear algebra has been through the solution of systems of linear equations.

* We used a tabular representation called a matrix to represent the linear system.
* The solution method uses matrix row reductions: exchanging rows, scaling rows, or adding rows.
* The solution method has two stages: elimination and backsubstitution.
:::

::: {.fragment}
We observed some basic properties of linear systems:

* They can be consistent or inconsistent.   
* If consistent, they can have a single solution or an infinite number of solutions.
:::

::: {.fragment}
We thought geometrically about linear systems and their solutions:

* A linear equation defines a hyperplane.
* In a consistent system, all hyperplanes intersect in one or more points.
* In an inconsistent system, all hyperplanes do not intersect in any single point.
* The solution method we used creates hyperplanes that intersect in the same point set as the original hyperplanes.
:::
:::::
