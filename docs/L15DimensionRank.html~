<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en"><head>

<meta charset="utf-8">
<meta name="generator" content="quarto-1.5.57">

<meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=yes">


<title>l15dimensionrank – Geometric Algorithms</title>
<style>
code{white-space: pre-wrap;}
span.smallcaps{font-variant: small-caps;}
div.columns{display: flex; gap: min(4vw, 1.5em);}
div.column{flex: auto; overflow-x: auto;}
div.hanging-indent{margin-left: 1.5em; text-indent: -1.5em;}
ul.task-list{list-style: none;}
ul.task-list li input[type="checkbox"] {
  width: 0.8em;
  margin: 0 0.8em 0.2em -1em; /* quarto-specific, see https://github.com/quarto-dev/quarto-cli/issues/4556 */ 
  vertical-align: middle;
}
</style>


<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js" integrity="sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==" crossorigin="anonymous"></script><script src="site_libs/quarto-nav/quarto-nav.js"></script>
<script src="site_libs/quarto-nav/headroom.min.js"></script>
<script src="site_libs/clipboard/clipboard.min.js"></script>
<script src="site_libs/quarto-search/autocomplete.umd.js"></script>
<script src="site_libs/quarto-search/fuse.min.js"></script>
<script src="site_libs/quarto-search/quarto-search.js"></script>
<meta name="quarto:offset" content="./">
<script src="site_libs/quarto-html/quarto.js"></script>
<script src="site_libs/quarto-html/popper.min.js"></script>
<script src="site_libs/quarto-html/tippy.umd.min.js"></script>
<script src="site_libs/quarto-html/anchor.min.js"></script>
<link href="site_libs/quarto-html/tippy.css" rel="stylesheet">
<link href="site_libs/quarto-html/quarto-syntax-highlighting.css" rel="stylesheet" id="quarto-text-highlighting-styles">
<script src="site_libs/bootstrap/bootstrap.min.js"></script>
<link href="site_libs/bootstrap/bootstrap-icons.css" rel="stylesheet">
<link href="site_libs/bootstrap/bootstrap.min.css" rel="stylesheet" id="quarto-bootstrap" data-mode="light">
<script id="quarto-search-options" type="application/json">{
  "location": "sidebar",
  "copy-button": false,
  "collapse-after": 3,
  "panel-placement": "start",
  "type": "textbox",
  "limit": 50,
  "keyboard-shortcut": [
    "f",
    "/",
    "s"
  ],
  "show-item-context": false,
  "language": {
    "search-no-results-text": "No results",
    "search-matching-documents-text": "matching documents",
    "search-copy-link-title": "Copy link to search",
    "search-hide-matches-text": "Hide additional matches",
    "search-more-match-text": "more match in this document",
    "search-more-matches-text": "more matches in this document",
    "search-clear-button-title": "Clear",
    "search-text-placeholder": "",
    "search-detached-cancel-button-title": "Cancel",
    "search-submit-button-title": "Submit",
    "search-label": "Search"
  }
}</script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js" integrity="sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==" crossorigin="anonymous"></script>

<script type="application/javascript">define('jquery', [],function() {return window.jQuery;})</script>
<script src="https://unpkg.com/@jupyter-widgets/html-manager@*/dist/embed-amd.js" crossorigin="anonymous"></script>

  <script src="https://cdnjs.cloudflare.com/polyfill/v3/polyfill.min.js?features=es6"></script>
  <script src="https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-chtml-full.js" type="text/javascript"></script>

<script type="text/javascript">
const typesetMath = (el) => {
  if (window.MathJax) {
    // MathJax Typeset
    window.MathJax.typeset([el]);
  } else if (window.katex) {
    // KaTeX Render
    var mathElements = el.getElementsByClassName("math");
    var macros = [];
    for (var i = 0; i < mathElements.length; i++) {
      var texText = mathElements[i].firstChild;
      if (mathElements[i].tagName == "SPAN") {
        window.katex.render(texText.data, mathElements[i], {
          displayMode: mathElements[i].classList.contains('display'),
          throwOnError: false,
          macros: macros,
          fleqn: false
        });
      }
    }
  }
}
window.Quarto = {
  typesetMath
};
</script>

<link rel="stylesheet" href="styles.css">
</head>

<body class="nav-sidebar docked slimcontent">

<div id="quarto-search-results"></div>
  <header id="quarto-header" class="headroom fixed-top">
  <nav class="quarto-secondary-nav">
    <div class="container-fluid d-flex">
      <button type="button" class="quarto-btn-toggle btn" data-bs-toggle="collapse" role="button" data-bs-target=".quarto-sidebar-collapse-item" aria-controls="quarto-sidebar" aria-expanded="false" aria-label="Toggle sidebar navigation" onclick="if (window.quartoToggleHeadroom) { window.quartoToggleHeadroom(); }">
        <i class="bi bi-layout-text-sidebar-reverse"></i>
      </button>
        <nav class="quarto-page-breadcrumbs" aria-label="breadcrumb"><ol class="breadcrumb"><li class="breadcrumb-item"><a href="./L15DimensionRank.html">Dimension and Rank</a></li></ol></nav>
        <a class="flex-grow-1" role="navigation" data-bs-toggle="collapse" data-bs-target=".quarto-sidebar-collapse-item" aria-controls="quarto-sidebar" aria-expanded="false" aria-label="Toggle sidebar navigation" onclick="if (window.quartoToggleHeadroom) { window.quartoToggleHeadroom(); }">      
        </a>
      <button type="button" class="btn quarto-search-button" aria-label="Search" onclick="window.quartoOpenSearch();">
        <i class="bi bi-search"></i>
      </button>
    </div>
  </nav>
</header>
<!-- content -->
<div id="quarto-content" class="quarto-container page-columns page-rows-contents page-layout-article">
<!-- sidebar -->
  <nav id="quarto-sidebar" class="sidebar collapse collapse-horizontal quarto-sidebar-collapse-item sidebar-navigation docked overflow-auto">
    <div class="pt-lg-2 mt-2 text-left sidebar-header">
      <a href="./index.html" class="sidebar-logo-link">
      <img src="./images/DiagramAR-icon.png" alt="" class="sidebar-logo py-0 d-lg-inline d-none">
      </a>
      </div>
        <div class="mt-2 flex-shrink-0 align-items-center">
        <div class="sidebar-search">
        <div id="quarto-search" class="" title="Search"></div>
        </div>
        </div>
    <div class="sidebar-menu-container"> 
    <ul class="list-unstyled mt-1">
        <li class="sidebar-item">
  <div class="sidebar-item-container"> 
  <a href="./landing_page.html" class="sidebar-item-text sidebar-link">
 <span class="menu-text">Preface</span></a>
  </div>
</li>
        <li class="sidebar-item">
  <div class="sidebar-item-container"> 
  <a href="./L01LinearEquations.html" class="sidebar-item-text sidebar-link">
 <span class="menu-text">Linear Equations</span></a>
  </div>
</li>
        <li class="sidebar-item">
  <div class="sidebar-item-container"> 
  <a href="./L02Numerics.html" class="sidebar-item-text sidebar-link">
 <span class="menu-text">(Getting Serious About) Numbers</span></a>
  </div>
</li>
        <li class="sidebar-item">
  <div class="sidebar-item-container"> 
  <a href="./L03RowReductions.html" class="sidebar-item-text sidebar-link">
 <span class="menu-text">Gaussian Elimination</span></a>
  </div>
</li>
        <li class="sidebar-item">
  <div class="sidebar-item-container"> 
  <a href="./L04VectorEquations.html" class="sidebar-item-text sidebar-link">
 <span class="menu-text">Vector Equations</span></a>
  </div>
</li>
        <li class="sidebar-item">
  <div class="sidebar-item-container"> 
  <a href="./L05Axb.html" class="sidebar-item-text sidebar-link">
 <span class="menu-text"><span class="math inline">\(A\mathbf{x} = \mathbf{b}\)</span></span></a>
  </div>
</li>
        <li class="sidebar-item">
  <div class="sidebar-item-container"> 
  <a href="./L06LinearIndependence.html" class="sidebar-item-text sidebar-link">
 <span class="menu-text">Linear Independence</span></a>
  </div>
</li>
        <li class="sidebar-item">
  <div class="sidebar-item-container"> 
  <a href="./L07LinearTransformations.html" class="sidebar-item-text sidebar-link">
 <span class="menu-text">Linear Transformations</span></a>
  </div>
</li>
        <li class="sidebar-item">
  <div class="sidebar-item-container"> 
  <a href="./L08MatrixofLinearTransformations.html" class="sidebar-item-text sidebar-link">
 <span class="menu-text">The Matrix of a Linear Transformation</span></a>
  </div>
</li>
        <li class="sidebar-item">
  <div class="sidebar-item-container"> 
  <a href="./L09MatrixOperations.html" class="sidebar-item-text sidebar-link">
 <span class="menu-text">Matrix Algebra</span></a>
  </div>
</li>
        <li class="sidebar-item">
  <div class="sidebar-item-container"> 
  <a href="./L10MatrixInverse.html" class="sidebar-item-text sidebar-link">
 <span class="menu-text">The Inverse of a Matrix</span></a>
  </div>
</li>
        <li class="sidebar-item">
  <div class="sidebar-item-container"> 
  <a href="./L11MarkovChains.html" class="sidebar-item-text sidebar-link">
 <span class="menu-text">Markov Chains</span></a>
  </div>
</li>
        <li class="sidebar-item">
  <div class="sidebar-item-container"> 
  <a href="./L12MatrixFactorizations.html" class="sidebar-item-text sidebar-link">
 <span class="menu-text">Matrix Factorizations</span></a>
  </div>
</li>
        <li class="sidebar-item">
  <div class="sidebar-item-container"> 
  <a href="./L13ComputerGraphics.html" class="sidebar-item-text sidebar-link">
 <span class="menu-text">Computer Graphics</span></a>
  </div>
</li>
        <li class="sidebar-item">
  <div class="sidebar-item-container"> 
  <a href="./L14Subspaces.html" class="sidebar-item-text sidebar-link">
 <span class="menu-text">Subspaces</span></a>
  </div>
</li>
        <li class="sidebar-item">
  <div class="sidebar-item-container"> 
  <a href="./L15DimensionRank.html" class="sidebar-item-text sidebar-link active">
 <span class="menu-text">Dimension and Rank</span></a>
  </div>
</li>
        <li class="sidebar-item">
  <div class="sidebar-item-container"> 
  <a href="./L16Eigenvectors.html" class="sidebar-item-text sidebar-link">
 <span class="menu-text">Eigenvectors and Eigenvalues</span></a>
  </div>
</li>
        <li class="sidebar-item">
  <div class="sidebar-item-container"> 
  <a href="./L17CharacteristicEqn.html" class="sidebar-item-text sidebar-link">
 <span class="menu-text">The Characteristic Equation</span></a>
  </div>
</li>
        <li class="sidebar-item">
  <div class="sidebar-item-container"> 
  <a href="./L18Diagonalization.html" class="sidebar-item-text sidebar-link">
 <span class="menu-text">Diagonalization</span></a>
  </div>
</li>
        <li class="sidebar-item">
  <div class="sidebar-item-container"> 
  <a href="./L19PageRank.html" class="sidebar-item-text sidebar-link">
 <span class="menu-text">PageRank</span></a>
  </div>
</li>
        <li class="sidebar-item">
  <div class="sidebar-item-container"> 
  <a href="./L20Orthogonality.html" class="sidebar-item-text sidebar-link">
 <span class="menu-text">Analytic Geometry in <span class="math inline">\(\mathbb{R}^n\)</span></span></a>
  </div>
</li>
        <li class="sidebar-item">
  <div class="sidebar-item-container"> 
  <a href="./L21OrthogonalSets.html" class="sidebar-item-text sidebar-link">
 <span class="menu-text">Orthogonal Sets and Projection</span></a>
  </div>
</li>
        <li class="sidebar-item">
  <div class="sidebar-item-container"> 
  <a href="./L22LeastSquares.html" class="sidebar-item-text sidebar-link">
 <span class="menu-text">Least Squares</span></a>
  </div>
</li>
        <li class="sidebar-item">
  <div class="sidebar-item-container"> 
  <a href="./L23LinearModels.html" class="sidebar-item-text sidebar-link">
 <span class="menu-text">Linear Models</span></a>
  </div>
</li>
        <li class="sidebar-item">
  <div class="sidebar-item-container"> 
  <a href="./L24SymmetricMatrices.html" class="sidebar-item-text sidebar-link">
 <span class="menu-text">Symmetric Matrices</span></a>
  </div>
</li>
        <li class="sidebar-item">
  <div class="sidebar-item-container"> 
  <a href="./L25SVD.html" class="sidebar-item-text sidebar-link">
 <span class="menu-text">The Singular Value Decomposition</span></a>
  </div>
</li>
        <li class="sidebar-item">
  <div class="sidebar-item-container"> 
  <a href="./L26ApplicationsOfSVD.html" class="sidebar-item-text sidebar-link">
 <span class="menu-text">Applications of the SVD</span></a>
  </div>
</li>
        <li class="sidebar-item">
  <div class="sidebar-item-container"> 
  <a href="./postscript.html" class="sidebar-item-text sidebar-link">
 <span class="menu-text">Postscript</span></a>
  </div>
</li>
    </ul>
    </div>
</nav>
<div id="quarto-sidebar-glass" class="quarto-sidebar-collapse-item" data-bs-toggle="collapse" data-bs-target=".quarto-sidebar-collapse-item"></div>
<!-- margin-sidebar -->
    <div id="quarto-margin-sidebar" class="sidebar margin-sidebar">
        <nav id="TOC" role="doc-toc" class="toc-active">
    <h2 id="toc-title">On this page</h2>
   
  <ul>
  <li><a href="#dimension-and-rank" id="toc-dimension-and-rank" class="nav-link active" data-scroll-target="#dimension-and-rank">Dimension and Rank</a></li>
  <li><a href="#coordinate-systems" id="toc-coordinate-systems" class="nav-link" data-scroll-target="#coordinate-systems">Coordinate Systems</a>
  <ul class="collapse">
  <li><a href="#finding-the-coordinates-of-a-point-in-a-basis." id="toc-finding-the-coordinates-of-a-point-in-a-basis." class="nav-link" data-scroll-target="#finding-the-coordinates-of-a-point-in-a-basis.">Finding the Coordinates of a Point in a Basis.</a></li>
  <li><a href="#isomorphism" id="toc-isomorphism" class="nav-link" data-scroll-target="#isomorphism">Isomorphism</a></li>
  </ul></li>
  <li><a href="#the-dimension-of-a-subspace" id="toc-the-dimension-of-a-subspace" class="nav-link" data-scroll-target="#the-dimension-of-a-subspace">The Dimension of a Subspace</a>
  <ul class="collapse">
  <li><a href="#dimension-of-the-null-space" id="toc-dimension-of-the-null-space" class="nav-link" data-scroll-target="#dimension-of-the-null-space">Dimension of the Null Space</a></li>
  <li><a href="#matrix-rank" id="toc-matrix-rank" class="nav-link" data-scroll-target="#matrix-rank">Matrix Rank</a></li>
  </ul></li>
  <li><a href="#the-rank-theorem" id="toc-the-rank-theorem" class="nav-link" data-scroll-target="#the-rank-theorem">The Rank Theorem</a>
  <ul class="collapse">
  <li><a href="#extending-the-invertible-matrix-theorem" id="toc-extending-the-invertible-matrix-theorem" class="nav-link" data-scroll-target="#extending-the-invertible-matrix-theorem">Extending the Invertible Matrix Theorem</a></li>
  </ul></li>
  </ul>
</nav>
    </div>
<!-- main -->
<main class="content page-columns page-full" id="quarto-document-content">




<!--
This comment somehow suppresses the title page
-->
<section id="dimension-and-rank" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="dimension-and-rank">Dimension and Rank</h2>

<div class="no-row-height column-margin column-container"><div class="">
<p>Many parts of this page are based on <em>Linear Algebra and its Applications,</em> by David C. Lay</p>
</div><div class="">
<p>Image credit: <a href="http://commons.wikimedia.org/wiki/File:Frans_Hals_-_Portret_van_Ren%C3%A9_Descartes.jpg#/media/File:Frans_Hals_-_Portret_van_Ren%C3%A9_Descartes.jpg">“Frans Hals - Portret van René Descartes</a>” by After <a href="//en.wikipedia.org/wiki/Frans_Hals" class="extiw" title="en:Frans Hals">Frans Hals</a> (1582/1583–1666) - André Hatala [e.a.] (1997) De eeuw van Rembrandt, Bruxelles: Crédit communal de Belgique, <a href="//commons.wikimedia.org/wiki/Special:BookSources/2908388324" class="internal mw-magiclink-isbn">ISBN 2-908388-32-4</a>.. Licensed under Public Domain via <a href="//commons.wikimedia.org/wiki/">Wikimedia Commons</a>.</p>
</div></div>
<p><img src="images/descartes.jpg" class="img-fluid" width="300"></p>
<p>Rene Descartes (1596-1650) was a French philosopher, mathematician, and writer. He is often credited with developing the idea of a coordinate system, although versions of coordinate systems had been seen in Greek mathematics since 300BC.</p>
<p>As a young man, Descartes had health problems and generally stayed in bed late each day. The story goes that one day as he lay in bed, he observed a fly on the ceiling of his room. He thought about how to describe the movement of the fly, and realized that he could completely describe it by measuring its distance from the walls of the room. This gave birth to the so-called <em>Cartesian coordinate system</em>.</p>
<p>What is certain is that Descartes championed the idea that geometric problems could be cast into algebraic form and solved in that fashion.</p>
<p>This was an important shift in thinking; the mathematical tradition begun by the Greeks held that geometry, as practiced by Euclid with <strong>compass and straightedge,</strong> was a more fundamental approach. For example, the problem of constructing a regular hexagon was one that the Greeks had studied and solved using non-numeric methods.</p>

<div class="no-row-height column-margin column-container"><div class="">
<p>Image credit: by Aldoaldoz - Own work, CC BY-SA 3.0, https://commons.wikimedia.org/w/index.php?curid=10023563</p>
</div></div><div class="fragment">
<p><img src="images/Regular_Hexagon_Inscribed_in_a_Circle_240px.gif" class="img-fluid" width="350"></p>
</div>
<div class="fragment">
<p>Descartes would have argued that a hexagon could be constructed exactly by simply computing the coordinates of its vertices.</p>
<p>The study of curves and shapes in algebraic form laid important groundwork for calculus, and Newton was strongly influenced by Descartes’ ideas.</p>
</div>
<p>Why is a coordinate system so useful?</p>
<p>The value of a coordinate system is that it gives a <em>unique name</em> to each point in the plane (or in any vector space).</p>
<p>Now, here is a question: what if the walls of Descartes’ room had <strong>not been square</strong>?</p>
<p>… in other words, the corners were not perpendicular?</p>
<p>Would his system still have worked? Would he still have been able to <strong>precisely specify</strong> the path of the fly?</p>
<p>We’ll explore this question today and use it to further deepen our understanding of linear operators.</p>
</section>
<section id="coordinate-systems" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="coordinate-systems">Coordinate Systems</h2>
<div class="fragment">
<p>In the last lecture we developed the idea of a <em>basis</em> – a minimal spanning set for a subspace <span class="math inline">\(H\)</span>.</p>
</div>
<div class="fragment">
<p>Today we’ll emphasize this aspect: a key value of a basis is that</p>
<center>
<font color="blue">a basis provides a <b>coordinate system</b> for <em>H</em>.</font>
</center>
</div>
<div class="fragment">
<p>In other words: if we are given a basis for <span class="math inline">\(H\)</span>, then <strong>each vector in <span class="math inline">\(H\)</span> can be written in only one way</strong> as a linear combination of the basis vectors.</p>
</div>
<div class="fragment">
<p>Let’s see this convincingly.</p>
<p>Suppose <span class="math inline">\(\mathcal{B}\ = \{\mathbf{b}_1,\dots,\mathbf{b}_p\}\)</span> is a basis for <span class="math inline">\(H,\)</span> and suppose a vector <span class="math inline">\(\mathbf{x}\)</span> in <span class="math inline">\(H\)</span> can be generated in two ways, say</p>
<p><span class="math display">\[\mathbf{x} = c_1\mathbf{b}_1+\cdots+c_p\mathbf{b}_p\]</span></p>
<center>
and
</center>
<p><span class="math display">\[\mathbf{x} = d_1\mathbf{b}_1+\cdots+d_p\mathbf{b}_p.\]</span></p>
</div>
<div class="fragment">
<p>Then, subtracting gives</p>
<p><span class="math display">\[{\bf 0} = \mathbf{x} - \mathbf{x} = (c_1-d_1)\mathbf{b}_1+\cdots+(c_p-d_p)\mathbf{b}_p.\]</span></p>
</div>
<div class="fragment">
<p>Now, since <span class="math inline">\(\mathcal{B}\)</span> is a basis, we know that the vectors <span class="math inline">\(\{\mathbf{b}_1\dots\mathbf{b}_p\}\)</span> are linearly independent.</p>
</div>
<div class="fragment">
<p>So by the definition of linear independence, the weights in the above expression must all be zero.</p>
<p>That is, <span class="math inline">\(c_j = d_j\)</span> for all <span class="math inline">\(j\)</span>.</p>
<p>… which shows that the two representations must be the same.</p>
</div>
<p><strong>Definition.</strong> Suppose the set <span class="math inline">\(\mathcal{B}\ = \{\mathbf{b}_1,\dots,\mathbf{b}_p\}\)</span> is a basis for the subspace <span class="math inline">\(H\)</span>.</p>
<p>For each <span class="math inline">\(\mathbf{x}\)</span> in <span class="math inline">\(H\)</span>, the <strong>coordinates of <span class="math inline">\(\mathbf{x}\)</span> relative to the basis <span class="math inline">\(\mathcal{B}\)</span></strong> are the weights <span class="math inline">\(c_1,\dots,c_p\)</span> such that <span class="math inline">\(\mathbf{x} = c_1\mathbf{b}_1+\cdots+c_p\mathbf{b}_p\)</span>.</p>
<div class="fragment">
<p>The vector in <span class="math inline">\(\mathbb{R}^p\)</span></p>
<p><span class="math display">\[[\mathbf{x}]_\mathcal{B} = \begin{bmatrix}c_1\\\vdots\\c_p\end{bmatrix}\]</span></p>
<p>is called the <strong>coordinate vector of <span class="math inline">\(\mathbf{x}\)</span> (relative to <span class="math inline">\(\mathcal{B}\)</span>)</strong> or the <strong><span class="math inline">\(\mathcal{B}\)</span>-coordinate vector of <span class="math inline">\(\mathbf{x}\)</span>.</strong></p>
</div>
<p>Here is an example in <span class="math inline">\(\mathbb{R}^2\)</span>:</p>
<p>Let’s look at the point <span class="math inline">\(\begin{bmatrix}1\\6\end{bmatrix}\)</span>.</p>
<div id="d2f40ac3" class="cell" data-execution_count="2">
<div class="cell-output cell-output-display">
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"b2279cbdb7f04072b3bfbf1a9c7115b1","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
</div>
</div>
<div class="fragment">
<p>Now we’ll use a new basis:</p>
<p><span class="math display">\[ \mathcal{B} = \left\{\begin{bmatrix}1\\0\end{bmatrix}, \begin{bmatrix}1\\2\end{bmatrix}\right\} \]</span></p>
</div>
<div class="fragment">
<p>Notice that the <strong>location</strong> of <span class="math inline">\(\mathbf{x}\)</span> relative to the origin does not change.</p>
<p>However, using the <span class="math inline">\(\mathcal{B}\)</span>-basis, it has <strong>different coordinates</strong>.</p>
<p>The new coordinates are <span class="math inline">\([\mathbf{x}]_\mathcal{B} = \begin{bmatrix}-2\\3\end{bmatrix}\)</span>.</p>
</div>
<!-- now should work, so convert to this approach
::: {.fragment}

::: {#a0148ffc .cell execution_count=3}
``` {.python .cell-code}
# when it is a clean install, convert to this approach
button = widgets.Button(description='Click here')
slider = widgets.IntSlider()
stacked = widgets.Stack([button, slider])
display(stacked)  # will show only the button
dropdown = widgets.Dropdown(options=['button', 'slider'])
widgets.jslink((dropdown, 'index'), (stacked, 'selected_index'))
widgets.VBox([dropdown, stacked])
```

::: {.cell-output .cell-output-display}

```{=html}
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"2903a0b6b8d4442fa12128ff10e84eab","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
```

:::

::: {.cell-output .cell-output-display execution_count=3}

```{=html}
<script type="application/vnd.jupyter.widget-view+json">
{"model_id":"53be4249db374d9d8b0b5e4da2b24f40","version_major":2,"version_minor":0,"quarto_mimetype":"application/vnd.jupyter.widget-view+json"}
</script>
```

:::
:::


:::
-->
<section id="finding-the-coordinates-of-a-point-in-a-basis." class="level3">
<h3 class="anchored" data-anchor-id="finding-the-coordinates-of-a-point-in-a-basis.">Finding the Coordinates of a Point in a Basis.</h3>
<p>OK. Now, let’s say we are given a particular basis. How do we find the coordinates of a point in that basis?</p>
<div class="fragment">
<p>Let’s consider a specific example.</p>
<p>Let <span class="math inline">\(\mathbf{v}_1 = \begin{bmatrix}3\\6\\2\end{bmatrix}, \mathbf{v}_2 = \begin{bmatrix}-1\\0\\1\end{bmatrix}, \mathbf{x} = \begin{bmatrix}3\\12\\7\end{bmatrix},\)</span> and <span class="math inline">\(\mathcal{B} = \{\mathbf{v}_1,\mathbf{v}_2\}.\)</span></p>
<p>Then <span class="math inline">\(\mathcal{B}\)</span> is a basis for <span class="math inline">\(H\)</span> = Span<span class="math inline">\(\{\mathbf{v}_1,\mathbf{v}_2\}\)</span> because <span class="math inline">\(\mathbf{v}_1\)</span> and <span class="math inline">\(\mathbf{v}_2\)</span> are linearly independent.</p>
</div>
<div class="fragment">
<p><strong>Problem:</strong> Determine if <span class="math inline">\(\mathbf{x}\)</span> is in <span class="math inline">\(H\)</span>, and if it is, find the coordinate vector of <span class="math inline">\(\mathbf{x}\)</span> relative to <span class="math inline">\(\mathcal{B}.\)</span></p>
</div>
<div class="fragment">
<p><strong>Solution.</strong> If <span class="math inline">\(\mathbf{x}\)</span> is in <span class="math inline">\(H,\)</span> then the following vector equation is consistent:</p>
<p><span class="math display">\[c_1\begin{bmatrix}3\\6\\2\end{bmatrix} + c_2\begin{bmatrix}-1\\0\\1\end{bmatrix} = \begin{bmatrix}3\\12\\7\end{bmatrix}.\]</span></p>
</div>
<div class="fragment">
<p>The scalars <span class="math inline">\(c_1\)</span> and <span class="math inline">\(c_2,\)</span> if they exist, are the <span class="math inline">\(\mathcal{B}\)</span>-coordinates of <span class="math inline">\(\mathbf{x}.\)</span></p>
</div>
<div class="fragment">
<p>Row operations show that</p>
<p><span class="math display">\[\begin{bmatrix}3&amp;-1&amp;3\\6&amp;0&amp;12\\2&amp;1&amp;7\end{bmatrix} \sim \begin{bmatrix}1&amp;0&amp;2\\0&amp;1&amp;3\\0&amp;0&amp;0\end{bmatrix}.\]</span></p>
</div>
<div class="fragment">
<p>The reduced row echelon form shows that the system is consistent, so <span class="math inline">\(\mathbf{x}\)</span> is in <span class="math inline">\(H\)</span>.</p>
<p>Furthermore, it shows that <span class="math inline">\(c_1 = 2\)</span> and <span class="math inline">\(c_2 = 3,\)</span></p>
<p>so <span class="math inline">\([\mathbf{x}]_\mathcal{B} = \begin{bmatrix}2\\3\end{bmatrix}.\)</span></p>
</div>
<div class="fragment">
<p>In this example, the basis <span class="math inline">\(\mathcal{B}\)</span> determines a coordinate system on <span class="math inline">\(H\)</span>, which can be visualized like this:</p>
<div id="5a4753a9" class="cell" data-execution_count="4">
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="L15DimensionRank_files/figure-html/cell-5-output-1.png" width="618" height="687" class="figure-img"></p>
</figure>
</div>
</div>
</div>
</div>
</section>
<section id="isomorphism" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="isomorphism">Isomorphism</h3>
<p>Another important idea is that, although points in <span class="math inline">\(H\)</span> are in <span class="math inline">\(\mathbb{R}^3\)</span>, they are completely determined by their coordinate vectors, which belong to <span class="math inline">\(\mathbb{R}^2.\)</span></p>
<p>In our example, <span class="math inline">\(\begin{bmatrix}3\\12\\7\end{bmatrix}\mapsto\begin{bmatrix}2\\3\end{bmatrix}\)</span>.</p>
<div class="fragment">
<p>We can see that the grid in the figure above makes <span class="math inline">\(H\)</span> “look like” <span class="math inline">\(\mathbb{R}^2.\)</span></p>
</div>

<div class="no-row-height column-margin column-container"><div class="">
<p>Note that a <em>one-to-one correspondence</em> is a function that is both one-to-one and onto – in other words, a bijection.</p>
</div></div><div class="fragment">
<p>The correspondence <span class="math inline">\(\mathbf{x} \mapsto [\mathbf{x}]_\mathcal{B}\)</span> is one-to-one correspondence between <span class="math inline">\(H\)</span> and <span class="math inline">\(\mathbb{R}^2\)</span> that preserves linear combinations.</p>
<p>In other words, if <span class="math inline">\(\mathbf{a} = \mathbf{b} + \mathbf{c}\)</span> when <span class="math inline">\(\mathbf{a}, \mathbf{b}, \mathbf{c} \in H\)</span>,</p>
<p>then <span class="math inline">\([\mathbf{a}]_\mathcal{B} = [\mathbf{b}]_\mathcal{B} + [\mathbf{c}]_\mathcal{B}\)</span> with <span class="math inline">\([\mathbf{a}]_\mathcal{B}, [\mathbf{b}]_\mathcal{B}, [\mathbf{c}]_\mathcal{B} \in \mathbb{R}^2\)</span></p>
</div>
<div class="fragment">
<p>When we have a one-to-one correspondence between two subspaces that preserves linear combinations, we call such a correspondence an <em>isomorphism,</em> and we say that <span class="math inline">\(H\)</span> is <em>isomorphic</em> to <span class="math inline">\(\mathbb{R}^2.\)</span></p>
</div>
<div class="fragment">
<p>In general, if <span class="math inline">\(\mathcal{B}\ = \{\mathbf{b}_1,\dots,\mathbf{b}_p\}\)</span> is a basis for <span class="math inline">\(H\)</span>, then the mapping <span class="math inline">\(\mathbf{x} \mapsto [\mathbf{x}]_\mathcal{B}\)</span> is a one-to-one correspondence that makes <span class="math inline">\(H\)</span> look and act the same as <span class="math inline">\(\mathbb{R}^p.\)</span></p>
<p>This is <em>even through the vectors in <span class="math inline">\(H\)</span> themselves may have more than <span class="math inline">\(p\)</span> entries.</em></p>
</div>
</section>
</section>
<section id="the-dimension-of-a-subspace" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="the-dimension-of-a-subspace">The Dimension of a Subspace</h2>

<div class="no-row-height column-margin column-container"><div class="">
<p>Here is an informal proof: Since <span class="math inline">\(H\)</span> has a basis of <span class="math inline">\(p\)</span> vectors, <span class="math inline">\(H\)</span> is isomorphic to <span class="math inline">\(\mathbb{R}^p\)</span>. Any set consisting of more than <span class="math inline">\(p\)</span> vectors in <span class="math inline">\(\mathbb{R}^p\)</span> must be dependent. Recall that an isomorphism preserves vector relationships (sums, linear combinations, etc). So by the nature of an isomorphism, we can establish that any set of more than <span class="math inline">\(p\)</span> vectors in <span class="math inline">\(H\)</span> must be dependent. So any basis for <span class="math inline">\(H\)</span> must have <span class="math inline">\(p\)</span> vectors.</p>
</div></div><div class="fragment">
<p>It can be shown that if a subspace <span class="math inline">\(H\)</span> has a basis of <span class="math inline">\(p\)</span> vectors, then every basis of <span class="math inline">\(H\)</span> must consist of exactly <span class="math inline">\(p\)</span> vectors.</p>
</div>
<div class="fragment">
<p>That is, for a given <span class="math inline">\(H\)</span>, the number <span class="math inline">\(p\)</span> is a special number.</p>
</div>
<div class="fragment">
<p>Thus we can make this definition:</p>
<p><strong>Definition.</strong> The <em>dimension</em> of a nonzero subspace <span class="math inline">\(H,\)</span> denoted by <span class="math inline">\(\dim H,\)</span> is the number of vectors in any basis for <span class="math inline">\(H.\)</span></p>
<p>The dimension of the zero subspace <span class="math inline">\(\{{\bf 0}\}\)</span> is defined to be zero.</p>
</div>
<div class="fragment">
<p>So now we can say <strong>with precision</strong> things we’ve previous said informally.</p>
<p>For example, a plane through <span class="math inline">\({\bf 0}\)</span> is two-dimensional, and a line through <span class="math inline">\({\bf 0}\)</span> is one-dimensional.</p>
</div>
<div class="fragment">
<p><strong>Question:</strong> What is the dimension of a line not through the origin?</p>
</div>
<div class="fragment">
<p><strong>Answer:</strong> It is undefined, because a line not through the the origin is not a subspace, so cannot have a basis, so does not have a dimension.</p>
</div>
<section id="dimension-of-the-null-space" class="level3">
<h3 class="anchored" data-anchor-id="dimension-of-the-null-space">Dimension of the Null Space</h3>
<p>At the end of the last lecture we looked at this matrix:</p>
<p><span class="math display">\[A = \begin{bmatrix}-3&amp;6&amp;-1&amp;1&amp;-7\\1&amp;-2&amp;2&amp;3&amp;-1\\2&amp;-4&amp;5&amp;8&amp;-4\end{bmatrix}\]</span></p>
<p>We determined that its null space had a basis consisting of 3 vectors.</p>
<p>So the dimension of <span class="math inline">\(A\)</span>’s null space (ie, <span class="math inline">\(\dim\operatorname{Nul} A\)</span>) is 3.</p>
<div class="fragment">
<p>Remember that we constructed an explicit description of the null space of this matrix, as:</p>
<p><span class="math display">\[ =
x_2\begin{bmatrix}2\\1\\0\\0\\0\end{bmatrix}+x_4\begin{bmatrix}1\\0\\-2\\1\\0\end{bmatrix}+x_5\begin{bmatrix}-3\\0\\2\\0\\1\end{bmatrix} \]</span></p>
<p>Each basis vector corresponds to a free variable in the equation <span class="math inline">\(A\mathbf{x} = {\bf 0}.\)</span></p>
<p>So, to find the dimension of <span class="math inline">\(\operatorname{Nul}\ A,\)</span> simply identify and count the number of free variables in <span class="math inline">\(A\mathbf{x} = {\bf 0}.\)</span></p>
</div>
</section>
<section id="matrix-rank" class="level3">
<h3 class="anchored" data-anchor-id="matrix-rank">Matrix Rank</h3>
<p><strong>Definition.</strong> The <strong>rank</strong> of a matrix, denoted by <span class="math inline">\(\operatorname{Rank} A,\)</span> is the <strong>dimension of the column space</strong> of <span class="math inline">\(A\)</span>.</p>
<div class="fragment">
<p>Since the pivot columns of <span class="math inline">\(A\)</span> form a basis for <span class="math inline">\(\operatorname{Col} A,\)</span> the rank of <span class="math inline">\(A\)</span> is just the number of pivot columns in <span class="math inline">\(A\)</span>.</p>
</div>
<div class="fragment">
<p><strong>Example.</strong> Determine the rank of the matrix</p>
<p><span class="math display">\[A = \begin{bmatrix}2&amp;5&amp;-3&amp;-4&amp;8\\4&amp;7&amp;-4&amp;-3&amp;9\\6&amp;9&amp;-5&amp;2&amp;4\\0&amp;-9&amp;6&amp;5&amp;-6\end{bmatrix}.\]</span></p>
</div>
<div class="fragment">
<p><strong>Solution</strong> Reduce <span class="math inline">\(A\)</span> to an echelon form:</p>
<p><span class="math display">\[A = \begin{bmatrix}2&amp;5&amp;-3&amp;-4&amp;8\\0&amp;-3&amp;2&amp;5&amp;-7\\0&amp;-6&amp;4&amp;14&amp;-20\\0&amp;-9&amp;6&amp;5&amp;-6\end{bmatrix}\sim\cdots\sim\begin{bmatrix}2&amp;5&amp;-3&amp;-4&amp;8\\0&amp;-3&amp;2&amp;5&amp;-7\\0&amp;0&amp;0&amp;4&amp;-6\\0&amp;0&amp;0&amp;0&amp;0\end{bmatrix}.\]</span></p>
<p>The matrix <span class="math inline">\(A\)</span> has 3 pivot columns, so <span class="math inline">\(\operatorname{Rank} A = 3.\)</span></p>
</div>
</section>
</section>
<section id="the-rank-theorem" class="level2">
<h2 class="anchored" data-anchor-id="the-rank-theorem">The Rank Theorem</h2>
<div class="fragment">
<p>Consider a matrix <span class="math inline">\(A.\)</span></p>
<p>In the last lecture we showed the following: one can construct a basis for <span class="math inline">\(\operatorname{Nul} A\)</span> using the columns corresponding to free variables in the solution of <span class="math inline">\(A\mathbf{x} = {\bf 0}.\)</span></p>
</div>
<div class="fragment">
<p>This shows that <span class="math inline">\(\dim\operatorname{Nul} A\)</span> = the number of free variables in <span class="math inline">\(A\mathbf{x} = {\bf 0},\)</span></p>
<p>which is the number of non-pivot columns in <span class="math inline">\(A\)</span>.</p>
</div>
<div class="fragment">
<p>We also saw that the number of columns in any basis for <span class="math inline">\(\operatorname{Col}\ A\)</span> is the number of pivot columns.</p>
</div>
<div class="fragment">
<p>So we can now make this important connection:</p>
<p><span class="math display">\[
\begin{array}{rcl}
\dim\operatorname{Nul} A + \dim\operatorname{Col} A &amp;= &amp;\text{number of non-pivot columns of $A$}\\ &amp;&amp; + \;\;\text{number of pivot columns of $A$}\\
&amp;= &amp;\text{number of columns of $A$}.
\end{array}
\]</span></p>
</div>
<p>These considerations lead to the following theorem:</p>
<p><strong>Theorem.</strong> If a matrix <span class="math inline">\(A\)</span> has <span class="math inline">\(n\)</span> columns, then <span class="math inline">\(\operatorname{Rank} A + \dim\operatorname{Nul} A = n\)</span>.</p>
<div class="fragment">
<p>This is a terrifically important fact!</p>
<p>Here is an intuitive way to understand it. Let’s think about a matrix <span class="math inline">\(A\)</span> and the associated linear transformation <span class="math inline">\(T(x) = Ax\)</span>.</p>
</div>
<div class="fragment">
<p>If the matrix <span class="math inline">\(A\)</span> has <span class="math inline">\(n\)</span> columns, then <span class="math inline">\(A\)</span>’s column space <em>could</em> have dimension as high as <span class="math inline">\(n\)</span>.</p>
<p>In other words, <span class="math inline">\(T\)</span>’s range <em>could</em> have dimension as high as <span class="math inline">\(n\)</span>.</p>
</div>
<div class="fragment">
<p><em>However,</em> if <span class="math inline">\(A\)</span> “throws away” a nullspace of dimension <span class="math inline">\(p\)</span>, then that <em>reduces</em> the columnspace of <span class="math inline">\(A\)</span> to <span class="math inline">\(n-p\)</span>.</p>
<p>Meaning, the dimension of <span class="math inline">\(T\)</span>’s range is reduced to <span class="math inline">\(n-p\)</span>.</p>
</div>
<section id="extending-the-invertible-matrix-theorem" class="level3">
<h3 class="anchored" data-anchor-id="extending-the-invertible-matrix-theorem">Extending the Invertible Matrix Theorem</h3>
<p>The above arguments show that when <span class="math inline">\(A\)</span> has <span class="math inline">\(n\)</span> columns, then the “larger” that the column space is, the “smaller” that the null space is.</p>
<p>(Where “larger” means “has more dimensions.”)</p>
<div class="fragment">
<p>This is particularly important when <span class="math inline">\(A\)</span> is square <span class="math inline">\((n\times n)\)</span>.</p>
<p>Let’s consider the extreme, in which the column space of <span class="math inline">\(A\)</span> has maximum dimension – i.e., <span class="math inline">\(\dim\operatorname{Col}\ A= n.\)</span></p>
</div>
<div class="fragment">
<p>Recall that the IMT said that an <span class="math inline">\(n\times n\)</span> matrix is invertible if and only if its columns are linearly independent, and if and only if its columns span <span class="math inline">\(\mathbb{R}^n.\)</span></p>
</div>
<div class="fragment">
<p>Hence we now can see that an <span class="math inline">\(n\times n\)</span> matrix is invertible if and only if the columns of <span class="math inline">\(A\)</span> form a basis for <span class="math inline">\(\mathbb{R}^n.\)</span></p>
</div>
<div class="fragment">
<p>This leads to the following facts, which further extend the IMT:</p>
</div>
<div class="fragment">
<p>Let <span class="math inline">\(A\)</span> be an <span class="math inline">\(n\times n\)</span> matrix. Then the following statements are each equivalent to the statement that <span class="math inline">\(A\)</span> is an invertible matrix:</p>
<ol type="1">
<li>The columns of <span class="math inline">\(A\)</span> form a basis for <span class="math inline">\(\mathbb{R}^n.\)</span></li>
<li><span class="math inline">\(\operatorname{Col} A = \mathbb{R}^n.\)</span></li>
<li><span class="math inline">\(\dim\operatorname{Col} A = n.\)</span></li>
<li><span class="math inline">\(\operatorname{Rank} A = n.\)</span></li>
<li><span class="math inline">\(\operatorname{Nul} A = \{{\bf 0}\}.\)</span></li>
<li><span class="math inline">\(\dim\operatorname{Nul} A = 0.\)</span></li>
</ol>
</div>


</section>
</section>

<a onclick="window.scrollTo(0, 0); return false;" role="button" id="quarto-back-to-top"><i class="bi bi-arrow-up"></i> Back to top</a></main> <!-- /main -->
<script type="application/vnd.jupyter.widget-state+json">
{"state":{"2903a0b6b8d4442fa12128ff10e84eab":{"model_module":"@jupyter-widgets/controls","model_module_version":"2.0.0","model_name":"StackModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"2.0.0","_model_name":"StackModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"2.0.0","_view_name":"StackView","box_style":"","children":["IPY_MODEL_c28cdcb2fd284e859a67ccf0e6b2f93f","IPY_MODEL_ad5f8bd5131144848506c2c199f5a90b"],"layout":"IPY_MODEL_615f2d53acbc441f882c7f4ec1884c0c","selected_index":null,"tabbable":null,"titles":["",""],"tooltip":null}},"325704b9c2664942852495f4d713b2d3":{"model_module":"@jupyter-widgets/base","model_module_version":"2.0.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"2.0.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"2.0.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border_bottom":null,"border_left":null,"border_right":null,"border_top":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"3b47e97e5b3145469e88f5c056342014":{"buffers":[{"data":"","encoding":"base64","path":["value"]}],"model_module":"@jupyter-widgets/controls","model_module_version":"2.0.0","model_name":"ImageModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"2.0.0","_model_name":"ImageModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"2.0.0","_view_name":"ImageView","format":"png","height":"","layout":"IPY_MODEL_903ecf10003c471bad66ca0a3d0af5e6","tabbable":null,"tooltip":null,"width":""}},"468c3bc3f4b54894a53a26382bcc8e78":{"buffers":[{"data":"","encoding":"base64","path":["value"]}],"model_module":"@jupyter-widgets/controls","model_module_version":"2.0.0","model_name":"ImageModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"2.0.0","_model_name":"ImageModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"2.0.0","_view_name":"ImageView","format":"png","height":"","layout":"IPY_MODEL_c9f13701226d4fa9a04a11d539580e8d","tabbable":null,"tooltip":null,"width":""}},"535703fe82ac4a118e7f6100de2f3c23":{"model_module":"@jupyter-widgets/base","model_module_version":"2.0.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"2.0.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"2.0.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border_bottom":null,"border_left":null,"border_right":null,"border_top":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"53be4249db374d9d8b0b5e4da2b24f40":{"model_module":"@jupyter-widgets/controls","model_module_version":"2.0.0","model_name":"VBoxModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"2.0.0","_model_name":"VBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"2.0.0","_view_name":"VBoxView","box_style":"","children":["IPY_MODEL_584db1a4be8949c1930a6c965dff27c5","IPY_MODEL_2903a0b6b8d4442fa12128ff10e84eab"],"layout":"IPY_MODEL_5cfc7e1b82984bcca585775cee9f654b","tabbable":null,"tooltip":null}},"55593b68102145369f1de58d458685bd":{"model_module":"@jupyter-widgets/base","model_module_version":"2.0.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"2.0.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"2.0.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border_bottom":null,"border_left":null,"border_right":null,"border_top":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"584db1a4be8949c1930a6c965dff27c5":{"model_module":"@jupyter-widgets/controls","model_module_version":"2.0.0","model_name":"DropdownModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"2.0.0","_model_name":"DropdownModel","_options_labels":["button","slider"],"_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"2.0.0","_view_name":"DropdownView","description":"","description_allow_html":false,"disabled":false,"index":0,"layout":"IPY_MODEL_55593b68102145369f1de58d458685bd","style":"IPY_MODEL_9f2b1897d69848cbb72a2c376df75455","tabbable":null,"tooltip":null}},"5cfc7e1b82984bcca585775cee9f654b":{"model_module":"@jupyter-widgets/base","model_module_version":"2.0.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"2.0.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"2.0.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border_bottom":null,"border_left":null,"border_right":null,"border_top":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"615f2d53acbc441f882c7f4ec1884c0c":{"model_module":"@jupyter-widgets/base","model_module_version":"2.0.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"2.0.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"2.0.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border_bottom":null,"border_left":null,"border_right":null,"border_top":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"6f5f76fdd7c849baa43795dab818f118":{"model_module":"@jupyter-widgets/controls","model_module_version":"2.0.0","model_name":"ButtonStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"2.0.0","_model_name":"ButtonStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"2.0.0","_view_name":"StyleView","button_color":null,"font_family":null,"font_size":null,"font_style":null,"font_variant":null,"font_weight":null,"text_color":null,"text_decoration":null}},"782c11ae078f42088f08cfb987d4dadf":{"model_module":"@jupyter-widgets/controls","model_module_version":"2.0.0","model_name":"LinkModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"2.0.0","_model_name":"LinkModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"2.0.0","_view_name":null,"source":["IPY_MODEL_584db1a4be8949c1930a6c965dff27c5","index"],"target":["IPY_MODEL_2903a0b6b8d4442fa12128ff10e84eab","selected_index"]}},"81c8ebe1eeb9437e96959f832d85cd85":{"model_module":"@jupyter-widgets/base","model_module_version":"2.0.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"2.0.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"2.0.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border_bottom":null,"border_left":null,"border_right":null,"border_top":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"8661f2735f5b401e870bff382d66a8b2":{"buffers":[{"data":"","encoding":"base64","path":["value"]}],"model_module":"@jupyter-widgets/controls","model_module_version":"2.0.0","model_name":"ImageModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"2.0.0","_model_name":"ImageModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"2.0.0","_view_name":"ImageView","format":"png","height":"","layout":"IPY_MODEL_325704b9c2664942852495f4d713b2d3","tabbable":null,"tooltip":null,"width":""}},"903ecf10003c471bad66ca0a3d0af5e6":{"model_module":"@jupyter-widgets/base","model_module_version":"2.0.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"2.0.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"2.0.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border_bottom":null,"border_left":null,"border_right":null,"border_top":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"9f2b1897d69848cbb72a2c376df75455":{"model_module":"@jupyter-widgets/controls","model_module_version":"2.0.0","model_name":"DescriptionStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"2.0.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"2.0.0","_view_name":"StyleView","description_width":""}},"ab5ad13ab3604ffc8833be21a0be66e8":{"model_module":"@jupyter-widgets/base","model_module_version":"2.0.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"2.0.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"2.0.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border_bottom":null,"border_left":null,"border_right":null,"border_top":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"ad5f8bd5131144848506c2c199f5a90b":{"model_module":"@jupyter-widgets/controls","model_module_version":"2.0.0","model_name":"IntSliderModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"2.0.0","_model_name":"IntSliderModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"2.0.0","_view_name":"IntSliderView","behavior":"drag-tap","continuous_update":true,"description":"","description_allow_html":false,"disabled":false,"layout":"IPY_MODEL_81c8ebe1eeb9437e96959f832d85cd85","max":100,"min":0,"orientation":"horizontal","readout":true,"readout_format":"d","step":1,"style":"IPY_MODEL_f28735146bb3471aa7a6e12b37a4ec22","tabbable":null,"tooltip":null,"value":0}},"b2279cbdb7f04072b3bfbf1a9c7115b1":{"model_module":"@jupyter-widgets/controls","model_module_version":"2.0.0","model_name":"TabModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"2.0.0","_model_name":"TabModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"2.0.0","_view_name":"TabView","box_style":"","children":["IPY_MODEL_3b47e97e5b3145469e88f5c056342014","IPY_MODEL_468c3bc3f4b54894a53a26382bcc8e78"],"layout":"IPY_MODEL_535703fe82ac4a118e7f6100de2f3c23","selected_index":0,"tabbable":null,"titles":["Standard","B-Basis"],"tooltip":null}},"c28cdcb2fd284e859a67ccf0e6b2f93f":{"model_module":"@jupyter-widgets/controls","model_module_version":"2.0.0","model_name":"ButtonModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"2.0.0","_model_name":"ButtonModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"2.0.0","_view_name":"ButtonView","button_style":"","description":"Click here","disabled":false,"icon":"","layout":"IPY_MODEL_daa90944aa004faf94479118cce868f9","style":"IPY_MODEL_6f5f76fdd7c849baa43795dab818f118","tabbable":null,"tooltip":null}},"c9f13701226d4fa9a04a11d539580e8d":{"model_module":"@jupyter-widgets/base","model_module_version":"2.0.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"2.0.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"2.0.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border_bottom":null,"border_left":null,"border_right":null,"border_top":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"ca7dc5f206bf4640bbd1f11199d93ef5":{"buffers":[{"data":"","encoding":"base64","path":["value"]}],"model_module":"@jupyter-widgets/controls","model_module_version":"2.0.0","model_name":"ImageModel","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"2.0.0","_model_name":"ImageModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"2.0.0","_view_name":"ImageView","format":"png","height":"","layout":"IPY_MODEL_ab5ad13ab3604ffc8833be21a0be66e8","tabbable":null,"tooltip":null,"width":""}},"daa90944aa004faf94479118cce868f9":{"model_module":"@jupyter-widgets/base","model_module_version":"2.0.0","model_name":"LayoutModel","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"2.0.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"2.0.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border_bottom":null,"border_left":null,"border_right":null,"border_top":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"f28735146bb3471aa7a6e12b37a4ec22":{"model_module":"@jupyter-widgets/controls","model_module_version":"2.0.0","model_name":"SliderStyleModel","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"2.0.0","_model_name":"SliderStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"2.0.0","_view_name":"StyleView","description_width":"","handle_color":null}}},"version_major":2,"version_minor":0}
</script>
<script id="quarto-html-after-body" type="application/javascript">
window.document.addEventListener("DOMContentLoaded", function (event) {
  const toggleBodyColorMode = (bsSheetEl) => {
    const mode = bsSheetEl.getAttribute("data-mode");
    const bodyEl = window.document.querySelector("body");
    if (mode === "dark") {
      bodyEl.classList.add("quarto-dark");
      bodyEl.classList.remove("quarto-light");
    } else {
      bodyEl.classList.add("quarto-light");
      bodyEl.classList.remove("quarto-dark");
    }
  }
  const toggleBodyColorPrimary = () => {
    const bsSheetEl = window.document.querySelector("link#quarto-bootstrap");
    if (bsSheetEl) {
      toggleBodyColorMode(bsSheetEl);
    }
  }
  toggleBodyColorPrimary();  
  const icon = "";
  const anchorJS = new window.AnchorJS();
  anchorJS.options = {
    placement: 'right',
    icon: icon
  };
  anchorJS.add('.anchored');
  const isCodeAnnotation = (el) => {
    for (const clz of el.classList) {
      if (clz.startsWith('code-annotation-')) {                     
        return true;
      }
    }
    return false;
  }
  const onCopySuccess = function(e) {
    // button target
    const button = e.trigger;
    // don't keep focus
    button.blur();
    // flash "checked"
    button.classList.add('code-copy-button-checked');
    var currentTitle = button.getAttribute("title");
    button.setAttribute("title", "Copied!");
    let tooltip;
    if (window.bootstrap) {
      button.setAttribute("data-bs-toggle", "tooltip");
      button.setAttribute("data-bs-placement", "left");
      button.setAttribute("data-bs-title", "Copied!");
      tooltip = new bootstrap.Tooltip(button, 
        { trigger: "manual", 
          customClass: "code-copy-button-tooltip",
          offset: [0, -8]});
      tooltip.show();    
    }
    setTimeout(function() {
      if (tooltip) {
        tooltip.hide();
        button.removeAttribute("data-bs-title");
        button.removeAttribute("data-bs-toggle");
        button.removeAttribute("data-bs-placement");
      }
      button.setAttribute("title", currentTitle);
      button.classList.remove('code-copy-button-checked');
    }, 1000);
    // clear code selection
    e.clearSelection();
  }
  const getTextToCopy = function(trigger) {
      const codeEl = trigger.previousElementSibling.cloneNode(true);
      for (const childEl of codeEl.children) {
        if (isCodeAnnotation(childEl)) {
          childEl.remove();
        }
      }
      return codeEl.innerText;
  }
  const clipboard = new window.ClipboardJS('.code-copy-button:not([data-in-quarto-modal])', {
    text: getTextToCopy
  });
  clipboard.on('success', onCopySuccess);
  if (window.document.getElementById('quarto-embedded-source-code-modal')) {
    // For code content inside modals, clipBoardJS needs to be initialized with a container option
    // TODO: Check when it could be a function (https://github.com/zenorocha/clipboard.js/issues/860)
    const clipboardModal = new window.ClipboardJS('.code-copy-button[data-in-quarto-modal]', {
      text: getTextToCopy,
      container: window.document.getElementById('quarto-embedded-source-code-modal')
    });
    clipboardModal.on('success', onCopySuccess);
  }
    var localhostRegex = new RegExp(/^(?:http|https):\/\/localhost\:?[0-9]*\//);
    var mailtoRegex = new RegExp(/^mailto:/);
      var filterRegex = new RegExp('/' + window.location.host + '/');
    var isInternal = (href) => {
        return filterRegex.test(href) || localhostRegex.test(href) || mailtoRegex.test(href);
    }
    // Inspect non-navigation links and adorn them if external
 	var links = window.document.querySelectorAll('a[href]:not(.nav-link):not(.navbar-brand):not(.toc-action):not(.sidebar-link):not(.sidebar-item-toggle):not(.pagination-link):not(.no-external):not([aria-hidden]):not(.dropdown-item):not(.quarto-navigation-tool):not(.about-link)');
    for (var i=0; i<links.length; i++) {
      const link = links[i];
      if (!isInternal(link.href)) {
        // undo the damage that might have been done by quarto-nav.js in the case of
        // links that we want to consider external
        if (link.dataset.originalHref !== undefined) {
          link.href = link.dataset.originalHref;
        }
      }
    }
  function tippyHover(el, contentFn, onTriggerFn, onUntriggerFn) {
    const config = {
      allowHTML: true,
      maxWidth: 500,
      delay: 100,
      arrow: false,
      appendTo: function(el) {
          return el.parentElement;
      },
      interactive: true,
      interactiveBorder: 10,
      theme: 'quarto',
      placement: 'bottom-start',
    };
    if (contentFn) {
      config.content = contentFn;
    }
    if (onTriggerFn) {
      config.onTrigger = onTriggerFn;
    }
    if (onUntriggerFn) {
      config.onUntrigger = onUntriggerFn;
    }
    window.tippy(el, config); 
  }
  const noterefs = window.document.querySelectorAll('a[role="doc-noteref"]');
  for (var i=0; i<noterefs.length; i++) {
    const ref = noterefs[i];
    tippyHover(ref, function() {
      // use id or data attribute instead here
      let href = ref.getAttribute('data-footnote-href') || ref.getAttribute('href');
      try { href = new URL(href).hash; } catch {}
      const id = href.replace(/^#\/?/, "");
      const note = window.document.getElementById(id);
      if (note) {
        return note.innerHTML;
      } else {
        return "";
      }
    });
  }
  const xrefs = window.document.querySelectorAll('a.quarto-xref');
  const processXRef = (id, note) => {
    // Strip column container classes
    const stripColumnClz = (el) => {
      el.classList.remove("page-full", "page-columns");
      if (el.children) {
        for (const child of el.children) {
          stripColumnClz(child);
        }
      }
    }
    stripColumnClz(note)
    if (id === null || id.startsWith('sec-')) {
      // Special case sections, only their first couple elements
      const container = document.createElement("div");
      if (note.children && note.children.length > 2) {
        container.appendChild(note.children[0].cloneNode(true));
        for (let i = 1; i < note.children.length; i++) {
          const child = note.children[i];
          if (child.tagName === "P" && child.innerText === "") {
            continue;
          } else {
            container.appendChild(child.cloneNode(true));
            break;
          }
        }
        if (window.Quarto?.typesetMath) {
          window.Quarto.typesetMath(container);
        }
        return container.innerHTML
      } else {
        if (window.Quarto?.typesetMath) {
          window.Quarto.typesetMath(note);
        }
        return note.innerHTML;
      }
    } else {
      // Remove any anchor links if they are present
      const anchorLink = note.querySelector('a.anchorjs-link');
      if (anchorLink) {
        anchorLink.remove();
      }
      if (window.Quarto?.typesetMath) {
        window.Quarto.typesetMath(note);
      }
      // TODO in 1.5, we should make sure this works without a callout special case
      if (note.classList.contains("callout")) {
        return note.outerHTML;
      } else {
        return note.innerHTML;
      }
    }
  }
  for (var i=0; i<xrefs.length; i++) {
    const xref = xrefs[i];
    tippyHover(xref, undefined, function(instance) {
      instance.disable();
      let url = xref.getAttribute('href');
      let hash = undefined; 
      if (url.startsWith('#')) {
        hash = url;
      } else {
        try { hash = new URL(url).hash; } catch {}
      }
      if (hash) {
        const id = hash.replace(/^#\/?/, "");
        const note = window.document.getElementById(id);
        if (note !== null) {
          try {
            const html = processXRef(id, note.cloneNode(true));
            instance.setContent(html);
          } finally {
            instance.enable();
            instance.show();
          }
        } else {
          // See if we can fetch this
          fetch(url.split('#')[0])
          .then(res => res.text())
          .then(html => {
            const parser = new DOMParser();
            const htmlDoc = parser.parseFromString(html, "text/html");
            const note = htmlDoc.getElementById(id);
            if (note !== null) {
              const html = processXRef(id, note);
              instance.setContent(html);
            } 
          }).finally(() => {
            instance.enable();
            instance.show();
          });
        }
      } else {
        // See if we can fetch a full url (with no hash to target)
        // This is a special case and we should probably do some content thinning / targeting
        fetch(url)
        .then(res => res.text())
        .then(html => {
          const parser = new DOMParser();
          const htmlDoc = parser.parseFromString(html, "text/html");
          const note = htmlDoc.querySelector('main.content');
          if (note !== null) {
            // This should only happen for chapter cross references
            // (since there is no id in the URL)
            // remove the first header
            if (note.children.length > 0 && note.children[0].tagName === "HEADER") {
              note.children[0].remove();
            }
            const html = processXRef(null, note);
            instance.setContent(html);
          } 
        }).finally(() => {
          instance.enable();
          instance.show();
        });
      }
    }, function(instance) {
    });
  }
      let selectedAnnoteEl;
      const selectorForAnnotation = ( cell, annotation) => {
        let cellAttr = 'data-code-cell="' + cell + '"';
        let lineAttr = 'data-code-annotation="' +  annotation + '"';
        const selector = 'span[' + cellAttr + '][' + lineAttr + ']';
        return selector;
      }
      const selectCodeLines = (annoteEl) => {
        const doc = window.document;
        const targetCell = annoteEl.getAttribute("data-target-cell");
        const targetAnnotation = annoteEl.getAttribute("data-target-annotation");
        const annoteSpan = window.document.querySelector(selectorForAnnotation(targetCell, targetAnnotation));
        const lines = annoteSpan.getAttribute("data-code-lines").split(",");
        const lineIds = lines.map((line) => {
          return targetCell + "-" + line;
        })
        let top = null;
        let height = null;
        let parent = null;
        if (lineIds.length > 0) {
            //compute the position of the single el (top and bottom and make a div)
            const el = window.document.getElementById(lineIds[0]);
            top = el.offsetTop;
            height = el.offsetHeight;
            parent = el.parentElement.parentElement;
          if (lineIds.length > 1) {
            const lastEl = window.document.getElementById(lineIds[lineIds.length - 1]);
            const bottom = lastEl.offsetTop + lastEl.offsetHeight;
            height = bottom - top;
          }
          if (top !== null && height !== null && parent !== null) {
            // cook up a div (if necessary) and position it 
            let div = window.document.getElementById("code-annotation-line-highlight");
            if (div === null) {
              div = window.document.createElement("div");
              div.setAttribute("id", "code-annotation-line-highlight");
              div.style.position = 'absolute';
              parent.appendChild(div);
            }
            div.style.top = top - 2 + "px";
            div.style.height = height + 4 + "px";
            div.style.left = 0;
            let gutterDiv = window.document.getElementById("code-annotation-line-highlight-gutter");
            if (gutterDiv === null) {
              gutterDiv = window.document.createElement("div");
              gutterDiv.setAttribute("id", "code-annotation-line-highlight-gutter");
              gutterDiv.style.position = 'absolute';
              const codeCell = window.document.getElementById(targetCell);
              const gutter = codeCell.querySelector('.code-annotation-gutter');
              gutter.appendChild(gutterDiv);
            }
            gutterDiv.style.top = top - 2 + "px";
            gutterDiv.style.height = height + 4 + "px";
          }
          selectedAnnoteEl = annoteEl;
        }
      };
      const unselectCodeLines = () => {
        const elementsIds = ["code-annotation-line-highlight", "code-annotation-line-highlight-gutter"];
        elementsIds.forEach((elId) => {
          const div = window.document.getElementById(elId);
          if (div) {
            div.remove();
          }
        });
        selectedAnnoteEl = undefined;
      };
        // Handle positioning of the toggle
    window.addEventListener(
      "resize",
      throttle(() => {
        elRect = undefined;
        if (selectedAnnoteEl) {
          selectCodeLines(selectedAnnoteEl);
        }
      }, 10)
    );
    function throttle(fn, ms) {
    let throttle = false;
    let timer;
      return (...args) => {
        if(!throttle) { // first call gets through
            fn.apply(this, args);
            throttle = true;
        } else { // all the others get throttled
            if(timer) clearTimeout(timer); // cancel #2
            timer = setTimeout(() => {
              fn.apply(this, args);
              timer = throttle = false;
            }, ms);
        }
      };
    }
      // Attach click handler to the DT
      const annoteDls = window.document.querySelectorAll('dt[data-target-cell]');
      for (const annoteDlNode of annoteDls) {
        annoteDlNode.addEventListener('click', (event) => {
          const clickedEl = event.target;
          if (clickedEl !== selectedAnnoteEl) {
            unselectCodeLines();
            const activeEl = window.document.querySelector('dt[data-target-cell].code-annotation-active');
            if (activeEl) {
              activeEl.classList.remove('code-annotation-active');
            }
            selectCodeLines(clickedEl);
            clickedEl.classList.add('code-annotation-active');
          } else {
            // Unselect the line
            unselectCodeLines();
            clickedEl.classList.remove('code-annotation-active');
          }
        });
      }
  const findCites = (el) => {
    const parentEl = el.parentElement;
    if (parentEl) {
      const cites = parentEl.dataset.cites;
      if (cites) {
        return {
          el,
          cites: cites.split(' ')
        };
      } else {
        return findCites(el.parentElement)
      }
    } else {
      return undefined;
    }
  };
  var bibliorefs = window.document.querySelectorAll('a[role="doc-biblioref"]');
  for (var i=0; i<bibliorefs.length; i++) {
    const ref = bibliorefs[i];
    const citeInfo = findCites(ref);
    if (citeInfo) {
      tippyHover(citeInfo.el, function() {
        var popup = window.document.createElement('div');
        citeInfo.cites.forEach(function(cite) {
          var citeDiv = window.document.createElement('div');
          citeDiv.classList.add('hanging-indent');
          citeDiv.classList.add('csl-entry');
          var biblioDiv = window.document.getElementById('ref-' + cite);
          if (biblioDiv) {
            citeDiv.innerHTML = biblioDiv.innerHTML;
          }
          popup.appendChild(citeDiv);
        });
        return popup.innerHTML;
      });
    }
  }
});
</script>
</div> <!-- /content -->




</body></html>